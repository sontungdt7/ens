{
  "address": "0x9E925AC19E07422D359D5f0Be69Fa4eaA2d3ddcC",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef3cdfa790b6da162b27d66f281cc2d5145322970b6f6f98b4004319f71978d7",
  "receipt": {
    "to": null,
    "from": "0xEE00C9792DED97cB81D24FD9D68a5d8c50b44646",
    "contractAddress": "0x9E925AC19E07422D359D5f0Be69Fa4eaA2d3ddcC",
    "transactionIndex": 48,
    "gasUsed": "2390621",
    "logsBloom": "0x
    "blockHash": "0x1fae667a69f27644868cbc06239511c86d4a01b9311e9045a40da6bec0d67e57",
    "transactionHash": "0xef3cdfa790b6da162b27d66f281cc2d5145322970b6f6f98b4004319f71978d7",
    "logs": [],
    "blockNumber": 7215263,
    "cumulativeGasUsed": "8261745",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dc2af84c7175ece61c3a517e7d6b1cba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ENS.sol\":\"ENS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ENS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\ncontract ENS is ERC721, ERC721Enumerable {\\n    using Strings for uint256;\\n\\n    uint256 public constant MAX_SUPPLY = 10000;\\n    uint256 public tokenCounter = 0;\\n\\n    mapping(address => uint256) public mintedTokens;\\n\\n    constructor() ERC721(\\\"ENS\\\", \\\"ENS\\\") {}\\n\\n    function mint() public {\\n        require(tokenCounter < MAX_SUPPLY, \\\"Max supply reached\\\");\\n        require(mintedTokens[msg.sender] < 3, \\\"Max 3 NFTs per wallet\\\");\\n\\n        uint256 tokenId = tokenCounter;\\n        _safeMint(msg.sender, tokenId);\\n\\n        tokenCounter += 1;\\n        mintedTokens[msg.sender] += 1;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n\\n        string memory svgImage = generateSVG(tokenId);\\n        string memory imageBase64 = Base64.encode(bytes(svgImage));\\n\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"Yin Yang NFT #',\\n                        tokenId.toString(),\\n                        '\\\", \\\"description\\\": \\\"An on-chain Yin Yang NFT.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        imageBase64,\\n                        '\\\"}'\\n                    )\\n                )\\n            )\\n        );\\n\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n\\n    function generateSVG(uint256 tokenId) internal pure returns (string memory) {\\n        // Define color arrays\\n        string[10] memory backgroundColors = [\\n            \\\"#D9E4F5\\\", \\\"#FFE9C6\\\", \\\"#C6E8E8\\\", \\\"#E8D8FF\\\", \\\"#FFDAC1\\\",\\n            \\\"#D5E8D4\\\", \\\"#FBE4E1\\\", \\\"#E0D8F3\\\", \\\"#D9F5E4\\\", \\\"#F4E5D4\\\"\\n        ];\\n        string[10] memory leftHalfColors = [\\n            \\\"#FFFFFF\\\", \\\"#FFEB3B\\\", \\\"#FFD54F\\\", \\\"#FFCDD2\\\", \\\"#F8BBD0\\\",\\n            \\\"#DCE775\\\", \\\"#FFF59D\\\", \\\"#C8E6C9\\\", \\\"#B2EBF2\\\", \\\"#BBDEFB\\\"\\n        ];\\n        string[10] memory rightHalfColors = [\\n            \\\"#000000\\\", \\\"#3E2723\\\", \\\"#263238\\\", \\\"#1B5E20\\\", \\\"#B71C1C\\\",\\n            \\\"#4A148C\\\", \\\"#880E4F\\\", \\\"#311B92\\\", \\\"#0D47A1\\\", \\\"#004D40\\\"\\n        ];\\n\\n        // Select colors based on tokenId\\n        string memory backgroundColor = backgroundColors[tokenId % backgroundColors.length];\\n        string memory leftColor = leftHalfColors[tokenId % leftHalfColors.length];\\n        string memory rightColor = rightHalfColors[tokenId % rightHalfColors.length];\\n\\n        // Ensure left and right colors are not the same\\n        if (keccak256(bytes(leftColor)) == keccak256(bytes(rightColor))) {\\n            rightColor = rightHalfColors[(tokenId + 1) % rightHalfColors.length];\\n        }\\n\\n        // Build the SVG\\n        return string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"600\\\" height=\\\"600\\\">',\\n                '<rect width=\\\"600\\\" height=\\\"600\\\" fill=\\\"', backgroundColor, '\\\"/>',\\n                '<g transform=\\\"translate(50,50)\\\">',\\n                // Left Half\\n                '<defs><clipPath id=\\\"lefthalf\\\"><rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"250\\\" height=\\\"500\\\"/></clipPath></defs>',\\n                '<circle cx=\\\"250\\\" cy=\\\"250\\\" r=\\\"250\\\" fill=\\\"', leftColor, '\\\" clip-path=\\\"url(#lefthalf)\\\"/>',\\n                // Right Half\\n                '<defs><clipPath id=\\\"righthalf\\\"><rect x=\\\"250\\\" y=\\\"0\\\" width=\\\"250\\\" height=\\\"500\\\"/></clipPath></defs>',\\n                '<circle cx=\\\"250\\\" cy=\\\"250\\\" r=\\\"250\\\" fill=\\\"', rightColor, '\\\" clip-path=\\\"url(#righthalf)\\\"/>',\\n                // Small Circles\\n                '<circle cx=\\\"250\\\" cy=\\\"125\\\" r=\\\"125\\\" fill=\\\"', leftColor, '\\\" />',\\n                '<circle cx=\\\"250\\\" cy=\\\"375\\\" r=\\\"125\\\" fill=\\\"', rightColor,'\\\" />',\\n                '<circle cx=\\\"250\\\" cy=\\\"125\\\" r=\\\"35\\\" fill=\\\"', rightColor, '\\\"/>',\\n                '<circle cx=\\\"250\\\" cy=\\\"375\\\" r=\\\"35\\\" fill=\\\"', leftColor, '\\\"/>',\\n                \\n                //ETH Money Symbol\\n                '<rect x=\\\"235\\\" y=\\\"109\\\" width=\\\"30\\\" height=\\\"3\\\" z=\\\"10\\\" fill=\\\"', leftColor, '\\\" />',\\n                '<rect x=\\\"237\\\" y=\\\"124\\\" width=\\\"26\\\" height=\\\"3\\\" z=\\\"10\\\" fill=\\\"', leftColor, '\\\" />',\\n                '<rect x=\\\"235\\\" y=\\\"139\\\" width=\\\"30\\\" height=\\\"3\\\" z=\\\"10\\\" fill=\\\"', leftColor, '\\\" />',\\n\\n                // Microchip in lower circle\\n                '<rect x=\\\"235\\\" y=\\\"360\\\" width=\\\"30\\\" height=\\\"30\\\" fill=\\\"', rightColor, '\\\"/>',                \\n                '<rect x=\\\"225\\\" y=\\\"366\\\" width=\\\"50\\\" height=\\\"2\\\" fill=\\\"', rightColor, '\\\"/>',\\n                '<rect x=\\\"225\\\" y=\\\"370\\\" width=\\\"50\\\" height=\\\"2\\\" fill=\\\"', rightColor, '\\\"/>',\\n                '<rect x=\\\"225\\\" y=\\\"374\\\" width=\\\"50\\\" height=\\\"2\\\" fill=\\\"', rightColor, '\\\"/>',\\n                '<rect x=\\\"225\\\" y=\\\"378\\\" width=\\\"50\\\" height=\\\"2\\\" fill=\\\"', rightColor, '\\\"/>',\\n                '<rect x=\\\"225\\\" y=\\\"382\\\" width=\\\"50\\\" height=\\\"2\\\" fill=\\\"', rightColor, '\\\"/>',\\n                \\n                '<rect x=\\\"249\\\" y=\\\"350\\\" width=\\\"2\\\" height=\\\"50\\\" fill=\\\"', rightColor, '\\\"/>',\\n                '<rect x=\\\"253\\\" y=\\\"350\\\" width=\\\"2\\\" height=\\\"50\\\" fill=\\\"', rightColor, '\\\"/>',\\n                '<rect x=\\\"257\\\" y=\\\"350\\\" width=\\\"2\\\" height=\\\"50\\\" fill=\\\"', rightColor, '\\\"/>',\\n                '<rect x=\\\"245\\\" y=\\\"350\\\" width=\\\"2\\\" height=\\\"50\\\" fill=\\\"', rightColor, '\\\"/>',\\n                '<rect x=\\\"241\\\" y=\\\"350\\\" width=\\\"2\\\" height=\\\"50\\\" fill=\\\"', rightColor, '\\\"/>',\\n\\n                '<rect x=\\\"240\\\" y=\\\"365\\\" width=\\\"20\\\" height=\\\"20\\\" fill=\\\"none\\\" stroke=\\\"', leftColor, '\\\"/>',\\n\\n                '<defs> <path id=\\\"s-curve\\\" d=\\\"M280,20 A240,240 0 0,1 150,500\\\" fill=\\\"none\\\" stroke=\\\"none\\\"/> </defs>',                    \\n                '<defs> <path id=\\\"s-curve-reverse\\\" d=\\\"M50,350 A240,240 0 0,1 300,30\\\" fill=\\\"none\\\" stroke=\\\"none\\\"/></defs>',\\n                \\n                '<text font-size=\\\"30\\\" fill=\\\"', leftColor, '\\\">',\\n                '<textPath href=\\\"#s-curve\\\" startOffset=\\\"30%\\\">ETH is money</textPath>',\\n                '</text>',\\n                '<text font-size=\\\"24\\\" fill=\\\"', rightColor, '\\\">',\\n                '<textPath href=\\\"#s-curve-reverse\\\" startOffset=\\\"10%\\\">Ethereum is the world computer</textPath>',\\n                '</text>',\\n\\n                // Additional elements as needed\\n                '</g>',\\n                '</svg>'\\n            )\\n        );\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 quantity\\n\\t) internal override(ERC721, ERC721Enumerable) {\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId, quantity);\\n\\t}\\n\\n\\tfunction _burn(\\n\\t\\tuint256 tokenId\\n\\t) internal override(ERC721) {\\n\\t\\tsuper._burn(tokenId);\\n\\t}\\n\\n    function supportsInterface(\\n\\t\\tbytes4 interfaceId\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(ERC721, ERC721Enumerable)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.supportsInterface(interfaceId);\\n\\t}\\n}\\n\",\"keccak256\":\"0xb8ee2600829a3165f2505d55afd6c3398c6b2b97dcac46539366b33df87057c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234620002e15762000014620002e6565b6200001e620002e6565b81519091906001600160401b03808211620002cb576000928354906001938483811c9316918215620002c0575b60209283851014620002ac578190601f9485811162000259575b508390858311600114620001f5578892620001e9575b5050600019600383901b1c191690851b1785555b8551928311620001d55783548481811c91168015620001ca575b82821014620001b6578281116200016e575b5080918311600114620001085750839482939492620000fc575b5050600019600383901b1c191690821b1790555b600a5560405161292e9081620003178239f35b015190503880620000d5565b90601f198316958486528286209286905b8882106200015657505083859697106200013c575b505050811b019055620000e9565b015160001960f88460031b161c191690553880806200012e565b80878596829496860151815501950193019062000119565b8486528186208380860160051c820192848710620001ac575b0160051c019085905b828110620001a0575050620000bb565b87815501859062000190565b9250819262000187565b634e487b7160e01b86526022600452602486fd5b90607f1690620000a9565b634e487b7160e01b85526041600452602485fd5b0151905038806200007b565b8880528489208894509190601f1984168a5b8782821062000242575050841162000228575b505050811b0185556200008f565b015160001960f88460031b161c191690553880806200021a565b8385015186558b9790950194938401930162000207565b9091508780528388208580850160051c820192868610620002a2575b918991869594930160051c01915b8281106200029357505062000065565b8a815585945089910162000283565b9250819262000275565b634e487b7160e01b87526022600452602487fd5b92607f16926200004b565b634e487b7160e01b600052604160045260246000fd5b600080fd5b60408051919082016001600160401b03811183821017620002cb576040526003825262454e5360e81b602083015256fe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a714611e335750816306fdde0314611d68578163081812fc14611d48578163095ea7b314611bda5781631249c58b1461195957816318160ddd1461193a57816323b872dd146119155781632f745c591461186957816332cb6b0c1461184c57816342842e0e146118185781634f6ccce7146117845781636352211e1461175357816370a08231146117265781637241dfa0146116ee57816395d89b41146115e7578163a22cb46514611517578163b88d4fde1461145f578163c87b56dd1461016f57508063d082e381146101515763e985e9c51461010157600080fd5b3461014d578060031936011261014d5760ff8160209361011f611f00565b610127611f1b565b6001600160a01b0391821683526005875283832091168252855220549151911615158152f35b5080fd5b503461014d578160031936011261014d57602090600a549051908152f35b8391503461014d576020918260031936011261145c5781356000818152600260205260409020549092906001600160a01b031615611422578451906101b382611f66565b85516101be81611fb5565b600790818152662344394534463560c81b87820152835286516101e081611fb5565b8181526611a323229ca19b60c91b8782015286840152865161020181611fb5565b81815266046866c8a708a760cb1b8782015287840152865161022281611fb5565b8181526611a29c221c232360c91b878201526060840152865161024481611fb5565b818152662346464441433160c81b878201526080840152865161026681611fb5565b8181526608d10d514e110d60ca1b8782015260a0840152865161028881611fb5565b818152662346424534453160c81b8782015260c084015286516102aa81611fb5565b818152662345304438463360c81b8782015260e084015286866105d782516102d181611fb5565b8481526608d10e518d514d60ca1b8382015261010090818801528351946102f786611fb5565b8086526608d18d114d510d60ca1b84870152610120958689015284519561031d87611f66565b855161032881611fb5565b8281526611a3232323232360c91b868201528752855161034781611fb5565b8281526611a32322a119a160c91b8682015285880152855161036881611fb5565b8281526611a323221a9a2360c91b8682015286880152855161038981611fb5565b8281526611a32321a2221960c91b86820152606088015285516103ab81611fb5565b828152660234638424244360cc1b86820152608088015285516103cd81611fb5565b828152662344434537373560c81b8682015260a088015285516103ef81611fb5565b8281526608d191918d4e5160ca1b8682015260c0880152855161041181611fb5565b828152662343384536433960c81b8682015260e0880152855161043381611fb5565b8281526611a11922a1231960c91b8682015283880152855161045481611fb5565b8281526611a1212222a32160c91b868201528188015285519261047684611f66565b865161048181611fb5565b838152660233030303030360cc1b87820152845286516104a081611fb5565b838152662333453237323360c81b878201528685015286516104c181611fb5565b83815266046646c666466760cb1b878201528785015286516104e281611fb5565b838152660233142354532360cc1b878201526060850152865161050481611fb5565b838152662342373143314360c81b878201526080850152865161052681611fb5565b838152662334413134384360c81b8782015260a0850152865161054881611fb5565b83815266119c1c18229a2360c91b8782015260c0850152865161056a81611fb5565b8381526611999898a11c9960c91b8782015260e085015286519061058d82611fb5565b838252662330443437413160c81b878301528401528551916105ae83611fb5565b8252660233030344434360cc1b858301528201526105e66105de600a98898c06948580926128e7565b51976128e7565b5192826128e7565b5191805191848201928320845186860120146113b2575b50926105c692859261112a9561112f987f30302f737667222077696474683d2236303022206865696768743d223630302298519889967f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323087890152870152601f60f91b60608701527f3c726563742077696474683d2236303022206865696768743d2236303022206660618701526434b6361e9160d91b60818701526106ac815180928760868a019101611eb8565b6211179f60e91b60869187019182018190527f3c67207472616e73666f726d3d227472616e736c6174652835302c353029223e60898301527f3c646566733e3c636c6970506174682069643d226c65667468616c66223e3c7260a98301527f65637420783d22302220793d2230222077696474683d2232353022206865696760c98301527f68743d22353030222f3e3c2f636c6970506174683e3c2f646566733e0000000060e98301527f3c636972636c652063783d22323530222063793d223235302220723d223235306101058301526711103334b6361e9160c11b610125830152919061087c90607d9061012d018351906107aa828289611eb8565b017f2220636c69702d706174683d2275726c28236c65667468616c6629222f3e000081527f3c646566733e3c636c6970506174682069643d22726967687468616c66223e3c601e8201527f7265637420783d223235302220793d2230222077696474683d22323530222068603e8201527f65696768743d22353030222f3e3c2f636c6970506174683e3c2f646566733e00605e820152016028907f3c636972636c652063783d22323530222063793d223235302220723d2232353081526711103334b6361e9160c11b60208201520190565b9484519085019561088e828289611eb8565b01917f2220636c69702d706174683d2275726c2823726967687468616c6629222f3e0083527f3c636972636c652063783d22323530222063793d223132352220723d22313235601f8401526711103334b6361e9160c11b9283603f8201528251906108fd826047830188611eb8565b01631110179f60e11b938460478301527f3c636972636c652063783d22323530222063793d223337352220723d22313235604b830152606b82015285519061094982607383018a611eb8565b018360738201527f3c636972636c652063783d22323530222063793d223132352220723d22333522607782015266103334b6361e9160c91b9081609782015286519061099982609e83018b611eb8565b019082609e8301527f3c636972636c652063783d22323530222063793d223337352220723d2233352260a183015260c18201528251906109dd8260c8830188611eb8565b01928160c88501527f3c7265637420783d223233352220793d22313039222077696474683d2233302260cb8501527f206865696768743d223322207a3d223130222066696c6c3d22000000000000008060eb86015281845161010496610a46828983018b611eb8565b01958601527f3c7265637420783d223233372220793d22313234222077696474683d223236226101088601528061012886015281845161014196610a8d828983018b611eb8565b01958601527f3c7265637420783d223233352220793d22313339222077696474683d22333022610145860152610165850152825161017e94610ad28287830189611eb8565b01938401527f3c7265637420783d223233352220793d22333630222077696474683d2233302261018284015272103432b4b3b43a1e91199811103334b6361e9160691b6101a28401528085516101b594610b2f828783018b611eb8565b01938401527f3c7265637420783d223232352220793d22333636222077696474683d223530226101b884015271103432b4b3b43a1e911911103334b6361e9160711b806101d88501528186516101ea95610b8c828883018c611eb8565b01948501527f3c7265637420783d223232352220793d22333730222077696474683d223530226101ed8501528061020d85015281865161021f95610bd3828883018c611eb8565b01948501527f3c7265637420783d223232352220793d22333734222077696474683d223530226102228501528061024285015281865161025495610c1a828883018c611eb8565b01948501527f3c7265637420783d223232352220793d22333738222077696474683d223530226102578501528061027785015281865161028995610c61828883018c611eb8565b01948501527f3c7265637420783d223232352220793d22333832222077696474683d2235302261028c8501526102ac8401528085516102be94610ca7828783018b611eb8565b01938401527f3c7265637420783d223234392220793d22333530222077696474683d223222206102c1840152713432b4b3b43a1e911a9811103334b6361e9160711b806102e18501528186516102f395610d04828883018c611eb8565b01948501527f3c7265637420783d223235332220793d22333530222077696474683d223222206102f68501528061031685015281865161032895610d4b828883018c611eb8565b01948501527f3c7265637420783d223235372220793d22333530222077696474683d2232222061032b8501528061034b85015281865161035d95610d92828883018c611eb8565b01948501527f3c7265637420783d223234352220793d22333530222077696474683d223222206103608501528061038085015281865161039295610dd9828883018c611eb8565b01948501527f3c7265637420783d223234312220793d22333530222077696474683d223222206103958501526103b58401528085516103c794610e1f828783018b611eb8565b01938401527f3c7265637420783d223234302220793d22333635222077696474683d223230226103ca8401527f206865696768743d223230222066696c6c3d226e6f6e6522207374726f6b653d6103ea840152601160f91b61040a840152815161040b93610e908286830188611eb8565b01928301527f3c646566733e203c706174682069643d22732d63757276652220643d224d323861040e8301527f302c323020413234302c323430203020302c31203135302c353030222066696c61042e8301527f6c3d226e6f6e6522207374726f6b653d226e6f6e65222f3e203c2f646566733e61044e8301527f3c646566733e203c706174682069643d22732d63757276652d7265766572736561046e8301527f2220643d224d35302c33353020413234302c323430203020302c31203330302c61048e8301527f3330222066696c6c3d226e6f6e6522207374726f6b653d226e6f6e65222f3e3c6104ae8301526517b232b3399f60d11b6104ce8301527f3c7465787420666f6e742d73697a653d223330222066696c6c3d2200000000006104d48301525190610fc9826104ef9485840190611eb8565b0161111f60f11b80928201527f3c746578745061746820687265663d2223732d6375727665222073746172744f6104f18201527f66667365743d22333025223e455448206973206d6f6e65793c2f746578745061610511820152623a341f60e91b610531820152661e17ba32bc3a1f60c91b92836105348301527f3c7465787420666f6e742d73697a653d223234222066696c6c3d22000000000061053b830152519061107d826105569687840190611eb8565b01928301527f3c746578745061746820687265663d2223732d63757276652d726576657273656105588301527f222073746172744f66667365743d22313025223e457468657265756d206973206105788301527f74686520776f726c6420636f6d70757465723c2f74657874506174683e0000006105988301526105b5820152631e17b39f60e11b6105bc820152651e17b9bb339f60d11b6105c0820152036105a6810184520182611fd1565b612790565b93828192829086937a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000090818110156113a5575b5050886d04ee2d6d415b85acef810000000080841015611397575b5050662386f26fc1000080831015611388575b506305f5e10080831015611379575b506127108083101561136d575b5050606481101561135f575b1015611357575b90602191600192816111ce8580940161275e565b9650860101905b611321575b878761131d6112bd8961112a608d8b87519384917f7b226e616d65223a202259696e2059616e67204e46542023000000000000000089840152611226815180928b603887019101611eb8565b82017f222c20226465736372697074696f6e223a2022416e206f6e2d636861696e205960388201527f696e2059616e67204e46542e222c2022696d616765223a2022646174613a696d6058820152721859d94bdcdd99cade1b5b0ed8985cd94d8d0b606a1b60788201526112a3825180938b608b85019101611eb8565b0161227d60f01b608b82015203606d810184520182611fd1565b9261130e603d825180967f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000878301526112fe81518092898686019101611eb8565b810103601d810187520185611fd1565b51928284938452830190611edb565b0390f35b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215611352579190826111d5565b6111da565b6001016111ba565b6064600291049201916111b3565b930192900489806111a7565b6008919492049101928a61119a565b6010919492049101928a61118b565b94019390910490888b611178565b8b95500491508a8061115d565b9250925092506001880180891161140f578961112f957f30302f737667222077696474683d2236303022206865696768743d22363030229561112a956114008f95968c6105c69806906128e7565b519550929550929550956105fd565b634e487b7160e01b885260118652602488fd5b845162461bcd60e51b81529081018490526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b80fd5b919050346115135760803660031901126115135761147b611f00565b90611484611f1b565b604435906064359467ffffffffffffffff861161150f573660238701121561150f57850135936114bf6114b686611ff3565b94519485611fd1565b84845286366024878901011161145c5760208661150797602461150c9a0183890137860101526114f76114f2843361220f565b612136565b6115028383836122d7565b61263a565b6121eb565b80f35b8680fd5b8280fd5b91905034611513578060031936011261151357611532611f00565b90602435918215158093036115e3576001600160a01b0316923384146115a15750338452600560205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b6020606492519162461bcd60e51b8352820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b8480fd5b82843461145c578060031936011261145c578151918160019283549384811c918186169586156116e4575b60209687851081146116d1578899509688969785829a5291826000146116aa57505060011461164f575b50505061131d929161130e910385611fd1565b91908693508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410611692575050508201018161130e61131d61163c565b8054848a018601528895508794909301928101611679565b60ff19168782015293151560051b8601909301935084925061130e915061131d905061163c565b634e487b7160e01b835260228a52602483fd5b92607f1692611612565b50503461014d57602036600319011261014d5760209181906001600160a01b03611716611f00565b168152600b845220549051908152f35b50503461014d57602036600319011261014d5760209061174c611747611f00565b61200f565b9051908152f35b82843461145c57602036600319011261145c5750611773602092356120d2565b90516001600160a01b039091168152f35b9050823461145c57602036600319011261145c57508035906008548210156117c0576020836117b2846126c5565b91905490519160031b1c8152f35b608490602084519162461bcd60e51b8352820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152fd5b50503461014d5761150761150c9161182f36611f31565b9192519261183c84611f99565b8684526114f76114f2843361220f565b50503461014d578160031936011261014d57602090516127108152f35b82843461145c578160031936011261145c57611883611f00565b602435906118908161200f565b8210156118be576001600160a01b031682526006602090815283832091835290815290829020548251908152f35b835162461bcd60e51b8152602081870152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b833461145c5761150c61192736611f31565b916119356114f2843361220f565b6122d7565b50503461014d578160031936011261014d576020906008549051908152f35b91905034611513578260031936011261151357600a54612710811015611ba257338452602090600b82526003838620541015611b685782519061199b82611f99565b8582523315611b27576000818152600260205260409020546119c9906001600160a01b031615155b15612712565b600854818752600984528085882055600160401b811015611b14579181611a1b61150793611a00866001611ac098016008556126c5565b90919082549060031b600019811b9283911b16911916179055565b611a243361200f565b33895260068652868920818a5286528689208290558189526007865286892055600081815260026020526040902054611a67906001600160a01b031615156119c3565b3380895260038652868920805460010190558189526002865286892080546001600160a01b031916821790558190897fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a43361251e565b600a5460018101809111611b015790600b91600a5533855252822080549160018301809311611aee57505580f35b634e487b7160e01b845260119052602483fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b875260418652602487fd5b606485848087519262461bcd60e51b845283015260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b50905162461bcd60e51b815291820152601560248201527413585e080cc81391951cc81c195c881dd85b1b195d605a1b6044820152606490fd5b815162461bcd60e51b8152602081850152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b6044820152606490fd5b905034611513578160031936011261151357611bf4611f00565b6024359290916001600160a01b0391908280611c0f876120d2565b16941693808514611cfb57803314908115611cdc575b5015611c7457848652602052842080546001600160a01b03191683179055611c4c836120d2565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b6020608492519162461bcd60e51b8352820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152fd5b90508652600560205281862033875260205260ff828720541638611c25565b506020608492519162461bcd60e51b8352820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152fd5b82843461145c57602036600319011261145c5750611773602092356120f8565b82843461145c578060031936011261145c5781519181825492600184811c91818616958615611e29575b60209687851081146116d1578899509688969785829a5291826000146116aa575050600114611dce5750505061131d929161130e910385611fd1565b91908693508280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410611e11575050508201018161130e61131d61163c565b8054848a018601528895508794909301928101611df8565b92607f1692611d92565b849134611513576020366003190112611513573563ffffffff60e01b8116809103611513576020925063780e9d6360e01b8114908115611e75575b5015158152f35b6380ac58cd60e01b811491508115611ea7575b8115611e96575b5083611e6e565b6301ffc9a760e01b14905083611e8f565b635b5e139f60e01b81149150611e88565b60005b838110611ecb5750506000910152565b8181015183820152602001611ebb565b90602091611ef481518092818552858086019101611eb8565b601f01601f1916010190565b600435906001600160a01b0382168203611f1657565b600080fd5b602435906001600160a01b0382168203611f1657565b6060906003190112611f16576001600160a01b03906004358281168103611f1657916024359081168103611f16579060443590565b610140810190811067ffffffffffffffff821117611f8357604052565b634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff821117611f8357604052565b6040810190811067ffffffffffffffff821117611f8357604052565b90601f8019910116810190811067ffffffffffffffff821117611f8357604052565b67ffffffffffffffff8111611f8357601f01601f191660200190565b6001600160a01b0316801561202f57600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b1561208d57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b03166120f5811515612086565b90565b60008181526002602052604090205461211b906001600160a01b03161515612086565b6000908152600460205260409020546001600160a01b031690565b1561213d57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b156121f257565b60405162461bcd60e51b81528061220b60048201612198565b0390fd5b906001600160a01b038080612223846120d2565b16931691838314938415612256575b508315612240575b50505090565b61224c919293506120f8565b161438808061223a565b909350600052600560205260406000208260005260205260ff604060002054169238612232565b1561228457565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b6122fb916122e4846120d2565b6001600160a01b039384841693918516841461227d565b8382169384156124cd57839182612414575090506008549085600052600960205281604060002055600160401b821015611f83576123619261234887611a008560018997016008556126c5565b8286036123e1575b5061235a866120d2565b161461227d565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008481526004602052604081206bffffffffffffffffffffffff60a01b9081815416905583825260036020526040822060001981540190558482526040822060018154019055858252600260205284604083209182541617905580a4565b6123ea9061200f565b60406000878152600660205281812083825260205288828220558881526007602052205538612350565b858303612426575b5061236192612348565b61243191925061200f565b6000198101919082116124b7576123619284926000908882526020906007825260409182842054828103612480575b508a8452838381205586845260068152828420918452528120559261241c565b8785526006825283852083865282528385205488865260068352848620828752835280858720558552600782528385205538612460565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9192600092909190803b156126305761256c946040518092630a85bd0160e11b9485835233600484015287602484015260448301526080606483015281878160209a8b966084830190611edb565b03926001600160a01b03165af18491816125f0575b506125df575050503d6000146125d7573d61259b81611ff3565b906125a96040519283611fd1565b81528091833d92013e5b805191826125d45760405162461bcd60e51b81528061220b60048201612198565b01fd5b5060606125b3565b6001600160e01b0319161492509050565b9091508581813d8311612629575b6126088183611fd1565b810103126115e357516001600160e01b0319811681036115e3579038612581565b503d6125fe565b5050915050600190565b9293600093909291803b156126ba579484916126949660405180948193630a85bd0160e11b9788845233600485015260018060a01b0380921660248501526044840152608060648401528260209b8c976084830190611edb565b0393165af18491816125f057506125df575050503d6000146125d7573d61259b81611ff3565b505050915050600190565b6008548110156126fc5760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b634e487b7160e01b600052603260045260246000fd5b1561271957565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b9061276882611ff3565b6127756040519182611fd1565b8281528092612786601f1991611ff3565b0190602036910137565b8051156128d3576040516060810181811067ffffffffffffffff821117611f8357604052604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f604082015281516002928382018092116124b7576003918290046001600160fe1b03811681036124b757612836908594951b61275e565b936020850193829183518401925b838110612882575050505051068060011461286f57600214612864575090565b603d90600019015390565b50603d9081600019820153600119015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c1688010151888501531685010151878201530195929190612844565b506040516128e081611f99565b6000815290565b90600a8110156126fc5760051b019056fea26469706673582212204d8c8992b1e062c6269f4a8da61b35262f4c3c211e77470107877be74080db6764736f6c63430008110033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a714611e335750816306fdde0314611d68578163081812fc14611d48578163095ea7b314611bda5781631249c58b1461195957816318160ddd1461193a57816323b872dd146119155781632f745c591461186957816332cb6b0c1461184c57816342842e0e146118185781634f6ccce7146117845781636352211e1461175357816370a08231146117265781637241dfa0146116ee57816395d89b41146115e7578163a22cb46514611517578163b88d4fde1461145f578163c87b56dd1461016f57508063d082e381146101515763e985e9c51461010157600080fd5b3461014d578060031936011261014d5760ff8160209361011f611f00565b610127611f1b565b6001600160a01b0391821683526005875283832091168252855220549151911615158152f35b5080fd5b503461014d578160031936011261014d57602090600a549051908152f35b8391503461014d576020918260031936011261145c5781356000818152600260205260409020549092906001600160a01b031615611422578451906101b382611f66565b85516101be81611fb5565b600790818152662344394534463560c81b87820152835286516101e081611fb5565b8181526611a323229ca19b60c91b8782015286840152865161020181611fb5565b81815266046866c8a708a760cb1b8782015287840152865161022281611fb5565b8181526611a29c221c232360c91b878201526060840152865161024481611fb5565b818152662346464441433160c81b878201526080840152865161026681611fb5565b8181526608d10d514e110d60ca1b8782015260a0840152865161028881611fb5565b818152662346424534453160c81b8782015260c084015286516102aa81611fb5565b818152662345304438463360c81b8782015260e084015286866105d782516102d181611fb5565b8481526608d10e518d514d60ca1b8382015261010090818801528351946102f786611fb5565b8086526608d18d114d510d60ca1b84870152610120958689015284519561031d87611f66565b855161032881611fb5565b8281526611a3232323232360c91b868201528752855161034781611fb5565b8281526611a32322a119a160c91b8682015285880152855161036881611fb5565b8281526611a323221a9a2360c91b8682015286880152855161038981611fb5565b8281526611a32321a2221960c91b86820152606088015285516103ab81611fb5565b828152660234638424244360cc1b86820152608088015285516103cd81611fb5565b828152662344434537373560c81b8682015260a088015285516103ef81611fb5565b8281526608d191918d4e5160ca1b8682015260c0880152855161041181611fb5565b828152662343384536433960c81b8682015260e0880152855161043381611fb5565b8281526611a11922a1231960c91b8682015283880152855161045481611fb5565b8281526611a1212222a32160c91b868201528188015285519261047684611f66565b865161048181611fb5565b838152660233030303030360cc1b87820152845286516104a081611fb5565b838152662333453237323360c81b878201528685015286516104c181611fb5565b83815266046646c666466760cb1b878201528785015286516104e281611fb5565b838152660233142354532360cc1b878201526060850152865161050481611fb5565b838152662342373143314360c81b878201526080850152865161052681611fb5565b838152662334413134384360c81b8782015260a0850152865161054881611fb5565b83815266119c1c18229a2360c91b8782015260c0850152865161056a81611fb5565b8381526611999898a11c9960c91b8782015260e085015286519061058d82611fb5565b838252662330443437413160c81b878301528401528551916105ae83611fb5565b8252660233030344434360cc1b858301528201526105e66105de600a98898c06948580926128e7565b51976128e7565b5192826128e7565b5191805191848201928320845186860120146113b2575b50926105c692859261112a9561112f987f30302f737667222077696474683d2236303022206865696768743d223630302298519889967f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323087890152870152601f60f91b60608701527f3c726563742077696474683d2236303022206865696768743d2236303022206660618701526434b6361e9160d91b60818701526106ac815180928760868a019101611eb8565b6211179f60e91b60869187019182018190527f3c67207472616e73666f726d3d227472616e736c6174652835302c353029223e60898301527f3c646566733e3c636c6970506174682069643d226c65667468616c66223e3c7260a98301527f65637420783d22302220793d2230222077696474683d2232353022206865696760c98301527f68743d22353030222f3e3c2f636c6970506174683e3c2f646566733e0000000060e98301527f3c636972636c652063783d22323530222063793d223235302220723d223235306101058301526711103334b6361e9160c11b610125830152919061087c90607d9061012d018351906107aa828289611eb8565b017f2220636c69702d706174683d2275726c28236c65667468616c6629222f3e000081527f3c646566733e3c636c6970506174682069643d22726967687468616c66223e3c601e8201527f7265637420783d223235302220793d2230222077696474683d22323530222068603e8201527f65696768743d22353030222f3e3c2f636c6970506174683e3c2f646566733e00605e820152016028907f3c636972636c652063783d22323530222063793d223235302220723d2232353081526711103334b6361e9160c11b60208201520190565b9484519085019561088e828289611eb8565b01917f2220636c69702d706174683d2275726c2823726967687468616c6629222f3e0083527f3c636972636c652063783d22323530222063793d223132352220723d22313235601f8401526711103334b6361e9160c11b9283603f8201528251906108fd826047830188611eb8565b01631110179f60e11b938460478301527f3c636972636c652063783d22323530222063793d223337352220723d22313235604b830152606b82015285519061094982607383018a611eb8565b018360738201527f3c636972636c652063783d22323530222063793d223132352220723d22333522607782015266103334b6361e9160c91b9081609782015286519061099982609e83018b611eb8565b019082609e8301527f3c636972636c652063783d22323530222063793d223337352220723d2233352260a183015260c18201528251906109dd8260c8830188611eb8565b01928160c88501527f3c7265637420783d223233352220793d22313039222077696474683d2233302260cb8501527f206865696768743d223322207a3d223130222066696c6c3d22000000000000008060eb86015281845161010496610a46828983018b611eb8565b01958601527f3c7265637420783d223233372220793d22313234222077696474683d223236226101088601528061012886015281845161014196610a8d828983018b611eb8565b01958601527f3c7265637420783d223233352220793d22313339222077696474683d22333022610145860152610165850152825161017e94610ad28287830189611eb8565b01938401527f3c7265637420783d223233352220793d22333630222077696474683d2233302261018284015272103432b4b3b43a1e91199811103334b6361e9160691b6101a28401528085516101b594610b2f828783018b611eb8565b01938401527f3c7265637420783d223232352220793d22333636222077696474683d223530226101b884015271103432b4b3b43a1e911911103334b6361e9160711b806101d88501528186516101ea95610b8c828883018c611eb8565b01948501527f3c7265637420783d223232352220793d22333730222077696474683d223530226101ed8501528061020d85015281865161021f95610bd3828883018c611eb8565b01948501527f3c7265637420783d223232352220793d22333734222077696474683d223530226102228501528061024285015281865161025495610c1a828883018c611eb8565b01948501527f3c7265637420783d223232352220793d22333738222077696474683d223530226102578501528061027785015281865161028995610c61828883018c611eb8565b01948501527f3c7265637420783d223232352220793d22333832222077696474683d2235302261028c8501526102ac8401528085516102be94610ca7828783018b611eb8565b01938401527f3c7265637420783d223234392220793d22333530222077696474683d223222206102c1840152713432b4b3b43a1e911a9811103334b6361e9160711b806102e18501528186516102f395610d04828883018c611eb8565b01948501527f3c7265637420783d223235332220793d22333530222077696474683d223222206102f68501528061031685015281865161032895610d4b828883018c611eb8565b01948501527f3c7265637420783d223235372220793d22333530222077696474683d2232222061032b8501528061034b85015281865161035d95610d92828883018c611eb8565b01948501527f3c7265637420783d223234352220793d22333530222077696474683d223222206103608501528061038085015281865161039295610dd9828883018c611eb8565b01948501527f3c7265637420783d223234312220793d22333530222077696474683d223222206103958501526103b58401528085516103c794610e1f828783018b611eb8565b01938401527f3c7265637420783d223234302220793d22333635222077696474683d223230226103ca8401527f206865696768743d223230222066696c6c3d226e6f6e6522207374726f6b653d6103ea840152601160f91b61040a840152815161040b93610e908286830188611eb8565b01928301527f3c646566733e203c706174682069643d22732d63757276652220643d224d323861040e8301527f302c323020413234302c323430203020302c31203135302c353030222066696c61042e8301527f6c3d226e6f6e6522207374726f6b653d226e6f6e65222f3e203c2f646566733e61044e8301527f3c646566733e203c706174682069643d22732d63757276652d7265766572736561046e8301527f2220643d224d35302c33353020413234302c323430203020302c31203330302c61048e8301527f3330222066696c6c3d226e6f6e6522207374726f6b653d226e6f6e65222f3e3c6104ae8301526517b232b3399f60d11b6104ce8301527f3c7465787420666f6e742d73697a653d223330222066696c6c3d2200000000006104d48301525190610fc9826104ef9485840190611eb8565b0161111f60f11b80928201527f3c746578745061746820687265663d2223732d6375727665222073746172744f6104f18201527f66667365743d22333025223e455448206973206d6f6e65793c2f746578745061610511820152623a341f60e91b610531820152661e17ba32bc3a1f60c91b92836105348301527f3c7465787420666f6e742d73697a653d223234222066696c6c3d22000000000061053b830152519061107d826105569687840190611eb8565b01928301527f3c746578745061746820687265663d2223732d63757276652d726576657273656105588301527f222073746172744f66667365743d22313025223e457468657265756d206973206105788301527f74686520776f726c6420636f6d70757465723c2f74657874506174683e0000006105988301526105b5820152631e17b39f60e11b6105bc820152651e17b9bb339f60d11b6105c0820152036105a6810184520182611fd1565b612790565b93828192829086937a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000090818110156113a5575b5050886d04ee2d6d415b85acef810000000080841015611397575b5050662386f26fc1000080831015611388575b506305f5e10080831015611379575b506127108083101561136d575b5050606481101561135f575b1015611357575b90602191600192816111ce8580940161275e565b9650860101905b611321575b878761131d6112bd8961112a608d8b87519384917f7b226e616d65223a202259696e2059616e67204e46542023000000000000000089840152611226815180928b603887019101611eb8565b82017f222c20226465736372697074696f6e223a2022416e206f6e2d636861696e205960388201527f696e2059616e67204e46542e222c2022696d616765223a2022646174613a696d6058820152721859d94bdcdd99cade1b5b0ed8985cd94d8d0b606a1b60788201526112a3825180938b608b85019101611eb8565b0161227d60f01b608b82015203606d810184520182611fd1565b9261130e603d825180967f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000878301526112fe81518092898686019101611eb8565b810103601d810187520185611fd1565b51928284938452830190611edb565b0390f35b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215611352579190826111d5565b6111da565b6001016111ba565b6064600291049201916111b3565b930192900489806111a7565b6008919492049101928a61119a565b6010919492049101928a61118b565b94019390910490888b611178565b8b95500491508a8061115d565b9250925092506001880180891161140f578961112f957f30302f737667222077696474683d2236303022206865696768743d22363030229561112a956114008f95968c6105c69806906128e7565b519550929550929550956105fd565b634e487b7160e01b885260118652602488fd5b845162461bcd60e51b81529081018490526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b80fd5b919050346115135760803660031901126115135761147b611f00565b90611484611f1b565b604435906064359467ffffffffffffffff861161150f573660238701121561150f57850135936114bf6114b686611ff3565b94519485611fd1565b84845286366024878901011161145c5760208661150797602461150c9a0183890137860101526114f76114f2843361220f565b612136565b6115028383836122d7565b61263a565b6121eb565b80f35b8680fd5b8280fd5b91905034611513578060031936011261151357611532611f00565b90602435918215158093036115e3576001600160a01b0316923384146115a15750338452600560205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b6020606492519162461bcd60e51b8352820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b8480fd5b82843461145c578060031936011261145c578151918160019283549384811c918186169586156116e4575b60209687851081146116d1578899509688969785829a5291826000146116aa57505060011461164f575b50505061131d929161130e910385611fd1565b91908693508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410611692575050508201018161130e61131d61163c565b8054848a018601528895508794909301928101611679565b60ff19168782015293151560051b8601909301935084925061130e915061131d905061163c565b634e487b7160e01b835260228a52602483fd5b92607f1692611612565b50503461014d57602036600319011261014d5760209181906001600160a01b03611716611f00565b168152600b845220549051908152f35b50503461014d57602036600319011261014d5760209061174c611747611f00565b61200f565b9051908152f35b82843461145c57602036600319011261145c5750611773602092356120d2565b90516001600160a01b039091168152f35b9050823461145c57602036600319011261145c57508035906008548210156117c0576020836117b2846126c5565b91905490519160031b1c8152f35b608490602084519162461bcd60e51b8352820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152fd5b50503461014d5761150761150c9161182f36611f31565b9192519261183c84611f99565b8684526114f76114f2843361220f565b50503461014d578160031936011261014d57602090516127108152f35b82843461145c578160031936011261145c57611883611f00565b602435906118908161200f565b8210156118be576001600160a01b031682526006602090815283832091835290815290829020548251908152f35b835162461bcd60e51b8152602081870152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b833461145c5761150c61192736611f31565b916119356114f2843361220f565b6122d7565b50503461014d578160031936011261014d576020906008549051908152f35b91905034611513578260031936011261151357600a54612710811015611ba257338452602090600b82526003838620541015611b685782519061199b82611f99565b8582523315611b27576000818152600260205260409020546119c9906001600160a01b031615155b15612712565b600854818752600984528085882055600160401b811015611b14579181611a1b61150793611a00866001611ac098016008556126c5565b90919082549060031b600019811b9283911b16911916179055565b611a243361200f565b33895260068652868920818a5286528689208290558189526007865286892055600081815260026020526040902054611a67906001600160a01b031615156119c3565b3380895260038652868920805460010190558189526002865286892080546001600160a01b031916821790558190897fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a43361251e565b600a5460018101809111611b015790600b91600a5533855252822080549160018301809311611aee57505580f35b634e487b7160e01b845260119052602483fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b875260418652602487fd5b606485848087519262461bcd60e51b845283015260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b50905162461bcd60e51b815291820152601560248201527413585e080cc81391951cc81c195c881dd85b1b195d605a1b6044820152606490fd5b815162461bcd60e51b8152602081850152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b6044820152606490fd5b905034611513578160031936011261151357611bf4611f00565b6024359290916001600160a01b0391908280611c0f876120d2565b16941693808514611cfb57803314908115611cdc575b5015611c7457848652602052842080546001600160a01b03191683179055611c4c836120d2565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b6020608492519162461bcd60e51b8352820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152fd5b90508652600560205281862033875260205260ff828720541638611c25565b506020608492519162461bcd60e51b8352820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152fd5b82843461145c57602036600319011261145c5750611773602092356120f8565b82843461145c578060031936011261145c5781519181825492600184811c91818616958615611e29575b60209687851081146116d1578899509688969785829a5291826000146116aa575050600114611dce5750505061131d929161130e910385611fd1565b91908693508280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410611e11575050508201018161130e61131d61163c565b8054848a018601528895508794909301928101611df8565b92607f1692611d92565b849134611513576020366003190112611513573563ffffffff60e01b8116809103611513576020925063780e9d6360e01b8114908115611e75575b5015158152f35b6380ac58cd60e01b811491508115611ea7575b8115611e96575b5083611e6e565b6301ffc9a760e01b14905083611e8f565b635b5e139f60e01b81149150611e88565b60005b838110611ecb5750506000910152565b8181015183820152602001611ebb565b90602091611ef481518092818552858086019101611eb8565b601f01601f1916010190565b600435906001600160a01b0382168203611f1657565b600080fd5b602435906001600160a01b0382168203611f1657565b6060906003190112611f16576001600160a01b03906004358281168103611f1657916024359081168103611f16579060443590565b610140810190811067ffffffffffffffff821117611f8357604052565b634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff821117611f8357604052565b6040810190811067ffffffffffffffff821117611f8357604052565b90601f8019910116810190811067ffffffffffffffff821117611f8357604052565b67ffffffffffffffff8111611f8357601f01601f191660200190565b6001600160a01b0316801561202f57600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b1561208d57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b03166120f5811515612086565b90565b60008181526002602052604090205461211b906001600160a01b03161515612086565b6000908152600460205260409020546001600160a01b031690565b1561213d57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b156121f257565b60405162461bcd60e51b81528061220b60048201612198565b0390fd5b906001600160a01b038080612223846120d2565b16931691838314938415612256575b508315612240575b50505090565b61224c919293506120f8565b161438808061223a565b909350600052600560205260406000208260005260205260ff604060002054169238612232565b1561228457565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b6122fb916122e4846120d2565b6001600160a01b039384841693918516841461227d565b8382169384156124cd57839182612414575090506008549085600052600960205281604060002055600160401b821015611f83576123619261234887611a008560018997016008556126c5565b8286036123e1575b5061235a866120d2565b161461227d565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008481526004602052604081206bffffffffffffffffffffffff60a01b9081815416905583825260036020526040822060001981540190558482526040822060018154019055858252600260205284604083209182541617905580a4565b6123ea9061200f565b60406000878152600660205281812083825260205288828220558881526007602052205538612350565b858303612426575b5061236192612348565b61243191925061200f565b6000198101919082116124b7576123619284926000908882526020906007825260409182842054828103612480575b508a8452838381205586845260068152828420918452528120559261241c565b8785526006825283852083865282528385205488865260068352848620828752835280858720558552600782528385205538612460565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9192600092909190803b156126305761256c946040518092630a85bd0160e11b9485835233600484015287602484015260448301526080606483015281878160209a8b966084830190611edb565b03926001600160a01b03165af18491816125f0575b506125df575050503d6000146125d7573d61259b81611ff3565b906125a96040519283611fd1565b81528091833d92013e5b805191826125d45760405162461bcd60e51b81528061220b60048201612198565b01fd5b5060606125b3565b6001600160e01b0319161492509050565b9091508581813d8311612629575b6126088183611fd1565b810103126115e357516001600160e01b0319811681036115e3579038612581565b503d6125fe565b5050915050600190565b9293600093909291803b156126ba579484916126949660405180948193630a85bd0160e11b9788845233600485015260018060a01b0380921660248501526044840152608060648401528260209b8c976084830190611edb565b0393165af18491816125f057506125df575050503d6000146125d7573d61259b81611ff3565b505050915050600190565b6008548110156126fc5760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b634e487b7160e01b600052603260045260246000fd5b1561271957565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b9061276882611ff3565b6127756040519182611fd1565b8281528092612786601f1991611ff3565b0190602036910137565b8051156128d3576040516060810181811067ffffffffffffffff821117611f8357604052604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f604082015281516002928382018092116124b7576003918290046001600160fe1b03811681036124b757612836908594951b61275e565b936020850193829183518401925b838110612882575050505051068060011461286f57600214612864575090565b603d90600019015390565b50603d9081600019820153600119015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c1688010151888501531685010151878201530195929190612844565b506040516128e081611f99565b6000815290565b90600a8110156126fc5760051b019056fea26469706673582212204d8c8992b1e062c6269f4a8da61b35262f4c3c211e77470107877be74080db6764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/ENS.sol:ENS",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/ENS.sol:ENS",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/ENS.sol:ENS",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/ENS.sol:ENS",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/ENS.sol:ENS",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/ENS.sol:ENS",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1075,
        "contract": "contracts/ENS.sol:ENS",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1079,
        "contract": "contracts/ENS.sol:ENS",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1082,
        "contract": "contracts/ENS.sol:ENS",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1086,
        "contract": "contracts/ENS.sol:ENS",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3134,
        "contract": "contracts/ENS.sol:ENS",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3138,
        "contract": "contracts/ENS.sol:ENS",
        "label": "mintedTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
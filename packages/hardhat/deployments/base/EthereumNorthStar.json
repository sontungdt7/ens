{
  "address": "0x50fBd0f15fE3B389D6B9c4C529c77AB3D5b6a11E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "royaltyFeeNumerator_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minterShares_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creatorShares_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "paymentSplitterReference_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CreatorTokenBase__InvalidTransferValidatorContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinterCreatorSharedRoyalties__CreatorCannotBeZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinterCreatorSharedRoyalties__CreatorSharesCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinterCreatorSharedRoyalties__MinterCannotBeZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinterCreatorSharedRoyalties__MinterHasAlreadyBeenAssignedToTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinterCreatorSharedRoyalties__MinterSharesCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinterCreatorSharedRoyalties__PaymentSplitterDoesNotExistForSpecifiedTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinterCreatorSharedRoyalties__PaymentSplitterReferenceCannotBeZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinterCreatorSharedRoyalties__RoyaltyFeeWillExceedSalePrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ShouldNotMintToBurnAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "autoApproved",
          "type": "bool"
        }
      ],
      "name": "AutomaticApprovalOfTransferValidatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValidator",
          "type": "address"
        }
      ],
      "name": "TransferValidatorUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_TRANSFER_VALIDATOR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoApproveTransfersFromValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creatorShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getColors",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "leftHalf",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rightHalf",
              "type": "string"
            }
          ],
          "internalType": "struct EthereumNorthStar.Colors",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTransferValidationFunction",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "functionSignature",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "isViewFunction",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTransferValidator",
      "outputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "leftColor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rightColor",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "minterOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "paymentSplitterOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentSplitterReference",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "paymentSplittersOfMinter",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "coin",
          "type": "address"
        },
        {
          "internalType": "enum MinterCreatorSharedRoyaltiesBase.ReleaseTo",
          "name": "releaseTo",
          "type": "uint8"
        }
      ],
      "name": "releasableERC20Funds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum MinterCreatorSharedRoyaltiesBase.ReleaseTo",
          "name": "releaseTo",
          "type": "uint8"
        }
      ],
      "name": "releasableNativeFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "coin",
          "type": "address"
        },
        {
          "internalType": "enum MinterCreatorSharedRoyaltiesBase.ReleaseTo",
          "name": "releaseTo",
          "type": "uint8"
        }
      ],
      "name": "releaseERC20Funds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum MinterCreatorSharedRoyaltiesBase.ReleaseTo",
          "name": "releaseTo",
          "type": "uint8"
        }
      ],
      "name": "releaseNativeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "autoApprove",
          "type": "bool"
        }
      ],
      "name": "setAutomaticApprovalOfTransfersFromValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "transferValidator_",
          "type": "address"
        }
      ],
      "name": "setTransferValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c871274ae1470e4bd766b28f8d6c8607e537a7d5954b6734b9caa5d2b79185f",
  "receipt": {
    "to": null,
    "from": "0xEE00C9792DED97cB81D24FD9D68a5d8c50b44646",
    "contractAddress": "0x50fBd0f15fE3B389D6B9c4C529c77AB3D5b6a11E",
    "transactionIndex": 329,
    "gasUsed": "3627733",
    "logsBloom": "0x00000000000000000000000000000000000000000000000200a80000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000001080000000000000002000000000000000000020000000000000000000800020000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000008000020000000000000000000000000008000000000000000000000000800000000000001000000000010000000000000000000000000000000000000020220000000000000400000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd296c466a06c34ee29f25eb368ca85f980814515e98182102cd045228043c7cb",
    "transactionHash": "0x0c871274ae1470e4bd766b28f8d6c8607e537a7d5954b6734b9caa5d2b79185f",
    "logs": [
      {
        "transactionIndex": 329,
        "blockNumber": 23417156,
        "transactionHash": "0x0c871274ae1470e4bd766b28f8d6c8607e537a7d5954b6734b9caa5d2b79185f",
        "address": "0x50fBd0f15fE3B389D6B9c4C529c77AB3D5b6a11E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ee00c9792ded97cb81d24fd9d68a5d8c50b44646"
        ],
        "data": "0x",
        "logIndex": 265,
        "blockHash": "0xd296c466a06c34ee29f25eb368ca85f980814515e98182102cd045228043c7cb"
      },
      {
        "transactionIndex": 329,
        "blockNumber": 23417156,
        "transactionHash": "0x0c871274ae1470e4bd766b28f8d6c8607e537a7d5954b6734b9caa5d2b79185f",
        "address": "0x50fBd0f15fE3B389D6B9c4C529c77AB3D5b6a11E",
        "topics": [
          "0xcc5dc080ff977b3c3a211fa63ab74f90f658f5ba9d3236e92c8f59570f442aac"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000721c002b0059009a671d00ad1700c9748146cd1b",
        "logIndex": 266,
        "blockHash": "0xd296c466a06c34ee29f25eb368ca85f980814515e98182102cd045228043c7cb"
      },
      {
        "transactionIndex": 329,
        "blockNumber": 23417156,
        "transactionHash": "0x0c871274ae1470e4bd766b28f8d6c8607e537a7d5954b6734b9caa5d2b79185f",
        "address": "0x721C002B0059009a671D00aD1700c9748146cd1B",
        "topics": [
          "0xa5c37ab91519073edd58e608f19f7ce383fd171f4f22c3612a1d0a7c1047794a",
          "0x00000000000000000000000050fbd0f15fe3b389d6b9c4c529c77ab3d5b6a11e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000002d1",
        "logIndex": 267,
        "blockHash": "0xd296c466a06c34ee29f25eb368ca85f980814515e98182102cd045228043c7cb"
      }
    ],
    "blockNumber": 23417156,
    "cumulativeGasUsed": "34291222",
    "status": 1,
    "byzantium": true
  },
  "args": [
    750,
    50,
    50,
    "0xEE00C9792DED97cB81D24FD9D68a5d8c50b44646",
    "0x13B8c8716d614aCC9E255044B4b6cDdCdA62e780",
    "Ethereum North Star",
    "ENS"
  ],
  "numDeployments": 3,
  "solcInputHash": "cddb39039162ea989d5d1cb365ffcb14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"royaltyFeeNumerator_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minterShares_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorShares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentSplitterReference_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CreatorTokenBase__InvalidTransferValidatorContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinterCreatorSharedRoyalties__CreatorCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinterCreatorSharedRoyalties__CreatorSharesCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinterCreatorSharedRoyalties__MinterCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinterCreatorSharedRoyalties__MinterHasAlreadyBeenAssignedToTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinterCreatorSharedRoyalties__MinterSharesCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinterCreatorSharedRoyalties__PaymentSplitterDoesNotExistForSpecifiedTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinterCreatorSharedRoyalties__PaymentSplitterReferenceCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinterCreatorSharedRoyalties__RoyaltyFeeWillExceedSalePrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShouldNotMintToBurnAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoApproved\",\"type\":\"bool\"}],\"name\":\"AutomaticApprovalOfTransferValidatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"TransferValidatorUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_TRANSFER_VALIDATOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoApproveTransfersFromValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getColors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"leftHalf\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rightHalf\",\"type\":\"string\"}],\"internalType\":\"struct EthereumNorthStar.Colors\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferValidationFunction\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSignature\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"isViewFunction\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"leftColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rightColor\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"minterOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"paymentSplitterOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentSplitterReference\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"paymentSplittersOfMinter\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"internalType\":\"enum MinterCreatorSharedRoyaltiesBase.ReleaseTo\",\"name\":\"releaseTo\",\"type\":\"uint8\"}],\"name\":\"releasableERC20Funds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum MinterCreatorSharedRoyaltiesBase.ReleaseTo\",\"name\":\"releaseTo\",\"type\":\"uint8\"}],\"name\":\"releasableNativeFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"internalType\":\"enum MinterCreatorSharedRoyaltiesBase.ReleaseTo\",\"name\":\"releaseTo\",\"type\":\"uint8\"}],\"name\":\"releaseERC20Funds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum MinterCreatorSharedRoyaltiesBase.ReleaseTo\",\"name\":\"releaseTo\",\"type\":\"uint8\"}],\"name\":\"releaseNativeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoApprove\",\"type\":\"bool\"}],\"name\":\"setAutomaticApprovalOfTransfersFromValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferValidator_\",\"type\":\"address\"}],\"name\":\"setTransferValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"CreatorTokenBase__InvalidTransferValidatorContract()\":[{\"details\":\"Thrown when setting a transfer validator address that has no deployed code.\"}],\"ShouldNotMintToBurnAddress()\":[{\"details\":\"Thrown when the from and to address are both the zero address.\"}]},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"minterOf(uint256)\":{\"params\":{\"tokenId\":\"The id of the token whose minter is being queried.\"},\"returns\":{\"_0\":\"The minter of the token with id `tokenId`.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paymentSplitterOf(uint256)\":{\"params\":{\"tokenId\":\"The id of the token whose payment splitter is being queried.\"},\"returns\":{\"_0\":\"The payment splitter of the token with id `tokenId`.\"}},\"paymentSplittersOfMinter(address)\":{\"params\":{\"minter\":\"The minter whose payment splitters are being queried.\"},\"returns\":{\"_0\":\"The payment splitters of the minter `minter`.\"}},\"releasableERC20Funds(uint256,address,uint8)\":{\"params\":{\"coin\":\"The address of the ERC20 token whose releasable funds are being queried.\",\"releaseTo\":\"Specifies whether the minter or creator should be queried.\",\"tokenId\":\"The id of the token whose releasable funds are being queried.\"},\"returns\":{\"_0\":\"The amount of ERC20 funds that can be released to the minter or creator of the token with id `tokenId`.\"}},\"releasableNativeFunds(uint256,uint8)\":{\"params\":{\"releaseTo\":\"Specifies whether the minter or creator should be queried.\",\"tokenId\":\"The id of the token whose releasable funds are being queried.\"},\"returns\":{\"_0\":\"The amount of native funds that can be released to the minter or creator of the token with id `tokenId`.\"}},\"releaseERC20Funds(uint256,address,uint8)\":{\"params\":{\"coin\":\"The address of the ERC20 token whose funds are being released.\",\"releaseTo\":\"Specifies whether the minter or creator should be released to.\",\"tokenId\":\"The id of the token whose funds are being released.\"}},\"releaseNativeFunds(uint256,uint8)\":{\"params\":{\"releaseTo\":\"Specifies whether the minter or creator should be released to.\",\"tokenId\":\"The id of the token whose funds are being released.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"salePrice\":\"The sale price of the token.\",\"tokenId\":\"The id of the token whose royalty info is being queried.\"},\"returns\":{\"_0\":\"The royalty fee and recipient for a given token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setAutomaticApprovalOfTransfersFromValidator(bool)\":{\"details\":\"Throws when the caller is not the contract owner. \",\"params\":{\"autoApprove\":\"If true, the collection's transfer validator will be automatically approved to                    transfer holder's tokens.\"}},\"setTransferValidator(address)\":{\"details\":\"Throws when provided validator contract is not the zero address and does not have code.Throws when the caller is not the contract owner.<h4>Postconditions:</h4>         1. The transferValidator address is updated.         2. The `TransferValidatorUpdated` event is emitted.\",\"params\":{\"transferValidator_\":\"The address of the transfer validator contract.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTransferValidationFunction()\":{\"notice\":\"Returns the function selector for the transfer validator's validation function to be called for transaction simulation. \"},\"getTransferValidator()\":{\"notice\":\"Returns the transfer validator contract address for this token contract.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Overrides behavior of isApprovedFor all such that if an operator is not explicitly approved         for all, the contract owner can optionally auto-approve the 721-C transfer validator for transfers.\"},\"minterOf(uint256)\":{\"notice\":\"Returns the minter of the token with id `tokenId`.\"},\"paymentSplitterOf(uint256)\":{\"notice\":\"Returns the payment splitter of the token with id `tokenId`.\"},\"paymentSplittersOfMinter(address)\":{\"notice\":\"Returns the payment splitters of the minter `minter`.\"},\"releasableERC20Funds(uint256,address,uint8)\":{\"notice\":\"Returns the amount of ERC20 funds that can be released to the minter or creator of the token with id `tokenId`.\"},\"releasableNativeFunds(uint256,uint8)\":{\"notice\":\"Returns the amount of native funds that can be released to the minter or creator of the token with id `tokenId`.\"},\"releaseERC20Funds(uint256,address,uint8)\":{\"notice\":\"Releases all available ERC20 funds to the minter or creator of the token with id `tokenId`.\"},\"releaseNativeFunds(uint256,uint8)\":{\"notice\":\"Releases all available native funds to the minter or creator of the token with id `tokenId`.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"Returns the royalty fee and recipient for a given token.\"},\"setAutomaticApprovalOfTransfersFromValidator(bool)\":{\"notice\":\"Sets if the transfer validator is automatically approved as an operator for all token owners. \"},\"setTransferValidator(address)\":{\"notice\":\"Sets the transfer validator for the token contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EthereumNorthStar.sol\":\"EthereumNorthStar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@limitbreak/creator-token-standards/src/access/OwnableBasic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./OwnablePermissions.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract OwnableBasic is OwnablePermissions, Ownable {\\n    function _requireCallerIsContractOwner() internal view virtual override {\\n        _checkOwner();\\n    }\\n}\\n\",\"keccak256\":\"0x40887f5fd1cbdb7c4fa5ca4b4a24ecc11b423bbb4a524cefddcab21de468894a\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/access/OwnablePermissions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nabstract contract OwnablePermissions is Context {\\n    function _requireCallerIsContractOwner() internal view virtual;\\n}\\n\",\"keccak256\":\"0x644b57f806c75124eaf3372418245f7ca016eca3e4a72fb27189019785952692\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/erc721c/ERC721C.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/AutomaticValidatorTransferApproval.sol\\\";\\nimport \\\"../utils/CreatorTokenBase.sol\\\";\\nimport \\\"../token/erc721/ERC721OpenZeppelin.sol\\\";\\nimport \\\"../interfaces/ITransferValidatorSetTokenType.sol\\\";\\nimport {TOKEN_TYPE_ERC721} from \\\"@limitbreak/permit-c/src/Constants.sol\\\";\\n\\n/**\\n * @title ERC721C\\n * @author Limit Break, Inc.\\n * @notice Extends OpenZeppelin's ERC721 implementation with Creator Token functionality, which\\n *         allows the contract owner to update the transfer validation logic by managing a security policy in\\n *         an external transfer validation security policy registry.  See {CreatorTokenTransferValidator}.\\n */\\nabstract contract ERC721C is ERC721OpenZeppelin, CreatorTokenBase, AutomaticValidatorTransferApproval {\\n\\n    /**\\n     * @notice Overrides behavior of isApprovedFor all such that if an operator is not explicitly approved\\n     *         for all, the contract owner can optionally auto-approve the 721-C transfer validator for transfers.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool isApproved) {\\n        isApproved = super.isApprovedForAll(owner, operator);\\n\\n        if (!isApproved) {\\n            if (autoApproveTransfersFromValidator) {\\n                isApproved = operator == address(getTransferValidator());\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Indicates whether the contract implements the specified interface.\\n     * @dev Overrides supportsInterface in ERC165.\\n     * @param interfaceId The interface id\\n     * @return true if the contract implements the specified interface, false otherwise\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return \\n        interfaceId == type(ICreatorToken).interfaceId || \\n        interfaceId == type(ICreatorTokenLegacy).interfaceId || \\n        super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Returns the function selector for the transfer validator's validation function to be called \\n     * @notice for transaction simulation. \\n     */\\n    function getTransferValidationFunction() external pure returns (bytes4 functionSignature, bool isViewFunction) {\\n        functionSignature = bytes4(keccak256(\\\"validateTransfer(address,address,address,uint256)\\\"));\\n        isViewFunction = true;\\n    }\\n\\n    /// @dev Ties the open-zeppelin _beforeTokenTransfer hook to more granular transfer validation logic\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize) internal virtual override {\\n        for (uint256 i = 0; i < batchSize;) {\\n            _validateBeforeTransfer(from, to, firstTokenId + i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Ties the open-zeppelin _afterTokenTransfer hook to more granular transfer validation logic\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize) internal virtual override {\\n        for (uint256 i = 0; i < batchSize;) {\\n            _validateAfterTransfer(from, to, firstTokenId + i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _tokenType() internal pure override returns(uint16) {\\n        return uint16(TOKEN_TYPE_ERC721);\\n    }\\n}\\n\\n/**\\n * @title ERC721CInitializable\\n * @author Limit Break, Inc.\\n * @notice Initializable implementation of ERC721C to allow for EIP-1167 proxy clones.\\n */\\nabstract contract ERC721CInitializable is ERC721OpenZeppelinInitializable, CreatorTokenBase, AutomaticValidatorTransferApproval {\\n\\n    function initializeERC721(string memory name_, string memory symbol_) public override {\\n        super.initializeERC721(name_, symbol_);\\n\\n        _emitDefaultTransferValidator();\\n        _registerTokenType(getTransferValidator());\\n    }\\n\\n    /**\\n     * @notice Overrides behavior of isApprovedFor all such that if an operator is not explicitly approved\\n     *         for all, the contract owner can optionally auto-approve the 721-C transfer validator for transfers.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool isApproved) {\\n        isApproved = super.isApprovedForAll(owner, operator);\\n\\n        if (!isApproved) {\\n            if (autoApproveTransfersFromValidator) {\\n                isApproved = operator == address(getTransferValidator());\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Indicates whether the contract implements the specified interface.\\n     * @dev Overrides supportsInterface in ERC165.\\n     * @param interfaceId The interface id\\n     * @return true if the contract implements the specified interface, false otherwise\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return \\n        interfaceId == type(ICreatorToken).interfaceId || \\n        interfaceId == type(ICreatorTokenLegacy).interfaceId || \\n        super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Returns the function selector for the transfer validator's validation function to be called \\n     * @notice for transaction simulation. \\n     */\\n    function getTransferValidationFunction() external pure returns (bytes4 functionSignature, bool isViewFunction) {\\n        functionSignature = bytes4(keccak256(\\\"validateTransfer(address,address,address,uint256)\\\"));\\n        isViewFunction = true;\\n    }\\n\\n    /// @dev Ties the open-zeppelin _beforeTokenTransfer hook to more granular transfer validation logic\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize) internal virtual override {\\n        for (uint256 i = 0; i < batchSize;) {\\n            _validateBeforeTransfer(from, to, firstTokenId + i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Ties the open-zeppelin _afterTokenTransfer hook to more granular transfer validation logic\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize) internal virtual override {\\n        for (uint256 i = 0; i < batchSize;) {\\n            _validateAfterTransfer(from, to, firstTokenId + i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _tokenType() internal pure override returns(uint16) {\\n        return uint16(TOKEN_TYPE_ERC721);\\n    }\\n}\",\"keccak256\":\"0x5e11a4be94e57bf4c704c65c772aea9ca0784571b95f7f94fa431a44df2ed8e9\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/interfaces/ICreatorToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICreatorToken {\\n    event TransferValidatorUpdated(address oldValidator, address newValidator);\\n    function getTransferValidator() external view returns (address validator);\\n    function setTransferValidator(address validator) external;\\n    function getTransferValidationFunction() external view returns (bytes4 functionSignature, bool isViewFunction);\\n}\",\"keccak256\":\"0x5a8b88f75fb891b8c3f8c6daaadeca58552f8c12d676e1679a01be6554e22384\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/interfaces/ICreatorTokenLegacy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICreatorTokenLegacy {\\n    event TransferValidatorUpdated(address oldValidator, address newValidator);\\n    function getTransferValidator() external view returns (address validator);\\n    function setTransferValidator(address validator) external;\\n}\\n\",\"keccak256\":\"0x431062158c57470a27e0d4a318a1b934632f9c68e06d908b0fd0375f38bbdeab\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/interfaces/ITransferValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ITransferValidator {\\n    function applyCollectionTransferPolicy(address caller, address from, address to) external view;\\n    function validateTransfer(address caller, address from, address to) external view;\\n    function validateTransfer(address caller, address from, address to, uint256 tokenId) external view;\\n    function validateTransfer(address caller, address from, address to, uint256 tokenId, uint256 amount) external;\\n\\n    function beforeAuthorizedTransfer(address operator, address token, uint256 tokenId) external;\\n    function afterAuthorizedTransfer(address token, uint256 tokenId) external;\\n    function beforeAuthorizedTransfer(address operator, address token) external;\\n    function afterAuthorizedTransfer(address token) external;\\n    function beforeAuthorizedTransfer(address token, uint256 tokenId) external;\\n    function beforeAuthorizedTransferWithAmount(address token, uint256 tokenId, uint256 amount) external;\\n    function afterAuthorizedTransferWithAmount(address token, uint256 tokenId) external;\\n}\",\"keccak256\":\"0x9861976c89092c5f0f4b19e85e5737d5eb9917140417c94954bf226ae915759e\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/interfaces/ITransferValidatorSetTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ITransferValidatorSetTokenType {\\n    function setTokenTypeOfCollection(address collection, uint16 tokenType) external;\\n}\",\"keccak256\":\"0x5b39cf08a638f2fa53d7d2caab3f8d5b7407580cf4b5ca3c277cfc0f76ed93ac\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/programmable-royalties/MinterCreatorSharedRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./helpers/IPaymentSplitterInitializable.sol\\\";\\nimport \\\"../access/OwnablePermissions.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @title MinterCreatorSharedRoyaltiesBase\\n * @author Limit Break, Inc.\\n * @dev Base functionality of an NFT mix-in contract implementing programmable royalties.  Royalties are shared between creators and minters.\\n */\\nabstract contract MinterCreatorSharedRoyaltiesBase is IERC2981, ERC165 {\\n\\n    error MinterCreatorSharedRoyalties__CreatorCannotBeZeroAddress();\\n    error MinterCreatorSharedRoyalties__CreatorSharesCannotBeZero();\\n    error MinterCreatorSharedRoyalties__MinterCannotBeZeroAddress();\\n    error MinterCreatorSharedRoyalties__MinterHasAlreadyBeenAssignedToTokenId();\\n    error MinterCreatorSharedRoyalties__MinterSharesCannotBeZero();\\n    error MinterCreatorSharedRoyalties__PaymentSplitterDoesNotExistForSpecifiedTokenId();\\n    error MinterCreatorSharedRoyalties__PaymentSplitterReferenceCannotBeZeroAddress();\\n    error MinterCreatorSharedRoyalties__RoyaltyFeeWillExceedSalePrice();\\n\\n    enum ReleaseTo {\\n        Minter,\\n        Creator\\n    }\\n\\n    uint256 public constant FEE_DENOMINATOR = 10_000;\\n    uint256 private _royaltyFeeNumerator;\\n    uint256 private _minterShares;\\n    uint256 private _creatorShares;\\n    address private _creator;\\n    address private _paymentSplitterReference;\\n\\n    mapping (uint256 => address) private _minters;\\n    mapping (uint256 => address) private _paymentSplitters;\\n    mapping (address => address[]) private _minterPaymentSplitters;\\n\\n    /**\\n     * @notice Indicates whether the contract implements the specified interface.\\n     * @dev Overrides supportsInterface in ERC165.\\n     * @param interfaceId The interface id\\n     * @return true if the contract implements the specified interface, false otherwise\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function royaltyFeeNumerator() public virtual view returns (uint256) {\\n        return _royaltyFeeNumerator;\\n    }\\n\\n    function minterShares() public virtual view returns (uint256) {\\n        return _minterShares;\\n    }\\n\\n    function creatorShares() public virtual view returns (uint256) {\\n        return _creatorShares;\\n    }\\n\\n    function creator() public virtual view returns (address) {\\n        return _creator;\\n    }\\n\\n    function paymentSplitterReference() public virtual view returns (address) {\\n        return _paymentSplitterReference;\\n    }\\n\\n    /**\\n     * @notice Returns the royalty fee and recipient for a given token.\\n     * @param  tokenId   The id of the token whose royalty info is being queried.\\n     * @param  salePrice The sale price of the token.\\n     * @return           The royalty fee and recipient for a given token.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view override returns (address, uint256) {\\n        return (_paymentSplitters[tokenId], (salePrice * royaltyFeeNumerator()) / FEE_DENOMINATOR);\\n    }\\n\\n    /**\\n     * @notice Returns the minter of the token with id `tokenId`.\\n     * @param  tokenId  The id of the token whose minter is being queried.\\n     * @return         The minter of the token with id `tokenId`.\\n     */\\n    function minterOf(uint256 tokenId) external view returns (address) {\\n        return _minters[tokenId];\\n    }\\n\\n    /**\\n     * @notice Returns the payment splitter of the token with id `tokenId`.\\n     * @param  tokenId  The id of the token whose payment splitter is being queried.\\n     * @return         The payment splitter of the token with id `tokenId`.\\n     */\\n    function paymentSplitterOf(uint256 tokenId) external view returns (address) {\\n        return _paymentSplitters[tokenId];\\n    }\\n\\n    /**\\n     * @notice Returns the payment splitters of the minter `minter`.\\n     * @param  minter  The minter whose payment splitters are being queried.\\n     * @return         The payment splitters of the minter `minter`.\\n     */\\n    function paymentSplittersOfMinter(address minter) external view returns (address[] memory) {\\n        return _minterPaymentSplitters[minter];\\n    }\\n\\n    /**\\n     * @notice Returns the amount of native funds that can be released to the minter or creator of the token with id `tokenId`.\\n     * @param  tokenId   The id of the token whose releasable funds are being queried.\\n     * @param  releaseTo Specifies whether the minter or creator should be queried.\\n     * @return           The amount of native funds that can be released to the minter or creator of the token with id `tokenId`.\\n     */\\n    function releasableNativeFunds(uint256 tokenId, ReleaseTo releaseTo) external view returns (uint256) {\\n        IPaymentSplitterInitializable paymentSplitter = _getPaymentSplitterForTokenOrRevert(tokenId);\\n\\n        if (releaseTo == ReleaseTo.Minter) {\\n            return paymentSplitter.releasable(payable(_minters[tokenId]));\\n        } else {\\n            return paymentSplitter.releasable(payable(creator()));\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the amount of ERC20 funds that can be released to the minter or creator of the token with id `tokenId`.\\n     * @param  tokenId   The id of the token whose releasable funds are being queried.\\n     * @param  coin      The address of the ERC20 token whose releasable funds are being queried.\\n     * @param  releaseTo Specifies whether the minter or creator should be queried.\\n     * @return           The amount of ERC20 funds that can be released to the minter or creator of the token with id `tokenId`.\\n     */\\n    function releasableERC20Funds(uint256 tokenId, address coin, ReleaseTo releaseTo) external view returns (uint256) {\\n        IPaymentSplitterInitializable paymentSplitter = _getPaymentSplitterForTokenOrRevert(tokenId);\\n\\n        if (releaseTo == ReleaseTo.Minter) {\\n            return paymentSplitter.releasable(IERC20(coin), _minters[tokenId]);\\n        } else {\\n            return paymentSplitter.releasable(IERC20(coin), creator());\\n        }\\n    }\\n\\n    /**\\n     * @notice Releases all available native funds to the minter or creator of the token with id `tokenId`.\\n     * @param  tokenId   The id of the token whose funds are being released.\\n     * @param  releaseTo Specifies whether the minter or creator should be released to.\\n     */\\n    function releaseNativeFunds(uint256 tokenId, ReleaseTo releaseTo) external {\\n        IPaymentSplitterInitializable paymentSplitter = _getPaymentSplitterForTokenOrRevert(tokenId);\\n\\n        if (releaseTo == ReleaseTo.Minter) {\\n            paymentSplitter.release(payable(_minters[tokenId]));\\n        } else {\\n            paymentSplitter.release(payable(creator()));\\n        }\\n    }\\n\\n    /**\\n     * @notice Releases all available ERC20 funds to the minter or creator of the token with id `tokenId`.\\n     * @param  tokenId   The id of the token whose funds are being released.\\n     * @param  coin      The address of the ERC20 token whose funds are being released.\\n     * @param  releaseTo Specifies whether the minter or creator should be released to.\\n     */\\n    function releaseERC20Funds(uint256 tokenId, address coin, ReleaseTo releaseTo) external {\\n        IPaymentSplitterInitializable paymentSplitter = _getPaymentSplitterForTokenOrRevert(tokenId);\\n\\n        if(releaseTo == ReleaseTo.Minter) {\\n            paymentSplitter.release(IERC20(coin), _minters[tokenId]);\\n        } else {\\n            paymentSplitter.release(IERC20(coin), creator());\\n        }\\n    }\\n\\n    /**\\n     * @dev   Internal function that must be called when a token is minted.\\n     *        Creates a payment splitter for the minter and creator of the token to share royalties.\\n     * @param minter  The minter of the token.\\n     * @param tokenId The id of the token that was minted.\\n     */\\n    function _onMinted(address minter, uint256 tokenId) internal {\\n        if (minter == address(0)) {\\n            revert MinterCreatorSharedRoyalties__MinterCannotBeZeroAddress();\\n        }\\n\\n        if (_minters[tokenId] != address(0)) {\\n            revert MinterCreatorSharedRoyalties__MinterHasAlreadyBeenAssignedToTokenId();\\n        }\\n\\n        address paymentSplitter = _createPaymentSplitter(minter);\\n        _paymentSplitters[tokenId] = paymentSplitter;\\n        _minterPaymentSplitters[minter].push(paymentSplitter);\\n        _minters[tokenId] = minter;\\n    }\\n\\n    /**\\n     * @dev  Internal function that must be called when a token is burned.\\n     *       Deletes the payment splitter mapping and minter mapping for the token in case it is ever re-minted.\\n     * @param tokenId The id of the token that was burned.\\n     */\\n    function _onBurned(uint256 tokenId) internal {\\n        delete _paymentSplitters[tokenId];\\n        delete _minters[tokenId];\\n    }\\n\\n    /**\\n     * @dev   Internal function that creates a payment splitter for the minter and creator of the token to share royalties.\\n     * @param minter The minter of the token.\\n     * @return       The address of the payment splitter.\\n     */\\n    function _createPaymentSplitter(address minter) private returns (address) {\\n        address creator_ = creator();\\n        address paymentSplitterReference_ = paymentSplitterReference();\\n\\n        IPaymentSplitterInitializable paymentSplitter = \\n            IPaymentSplitterInitializable(Clones.clone(paymentSplitterReference_));\\n\\n        if (minter == creator_) {\\n            address[] memory payees = new address[](1);\\n            payees[0] = creator_;\\n\\n            uint256[] memory shares = new uint256[](1);\\n            shares[0] = minterShares() + creatorShares();\\n\\n            paymentSplitter.initializePaymentSplitter(payees, shares);\\n        } else {\\n            address[] memory payees = new address[](2);\\n            payees[0] = minter;\\n            payees[1] = creator_;\\n\\n            uint256[] memory shares = new uint256[](2);\\n            shares[0] = minterShares();\\n            shares[1] = creatorShares();\\n\\n            paymentSplitter.initializePaymentSplitter(payees, shares);\\n        }\\n\\n        return address(paymentSplitter);\\n    }\\n\\n    /**\\n     * @dev Gets the payment splitter for the specified token id or reverts if it does not exist.\\n     */\\n    function _getPaymentSplitterForTokenOrRevert(uint256 tokenId) private view returns (IPaymentSplitterInitializable) {\\n        address paymentSplitterForToken = _paymentSplitters[tokenId];\\n        if(paymentSplitterForToken == address(0)) {\\n            revert MinterCreatorSharedRoyalties__PaymentSplitterDoesNotExistForSpecifiedTokenId();\\n        }\\n\\n        return IPaymentSplitterInitializable(payable(paymentSplitterForToken));\\n    }\\n\\n    function _setRoyaltyFeeNumeratorAndShares(\\n        uint256 royaltyFeeNumerator_, \\n        uint256 minterShares_, \\n        uint256 creatorShares_, \\n        address creator_,\\n        address paymentSplitterReference_) internal {\\n        if(royaltyFeeNumerator_ > FEE_DENOMINATOR) {\\n            revert MinterCreatorSharedRoyalties__RoyaltyFeeWillExceedSalePrice();\\n        }\\n\\n        if (minterShares_ == 0) {\\n            revert MinterCreatorSharedRoyalties__MinterSharesCannotBeZero();\\n        }\\n\\n        if (creatorShares_ == 0) {\\n            revert MinterCreatorSharedRoyalties__CreatorSharesCannotBeZero();\\n        }\\n\\n        if (creator_ == address(0)) {\\n            revert MinterCreatorSharedRoyalties__CreatorCannotBeZeroAddress();\\n        }\\n\\n        if (paymentSplitterReference_ == address(0)) {\\n            revert MinterCreatorSharedRoyalties__PaymentSplitterReferenceCannotBeZeroAddress();\\n        }\\n\\n        _royaltyFeeNumerator = royaltyFeeNumerator_;\\n        _minterShares = minterShares_;\\n        _creatorShares = creatorShares_;\\n        _creator = creator_;\\n        _paymentSplitterReference = paymentSplitterReference_;\\n    }\\n}\\n\\n/**\\n * @title MinterCreatorSharedRoyalties\\n * @author Limit Break, Inc.\\n * @notice Constructable MinterCreatorSharedRoyalties Contract implementation.\\n */\\nabstract contract MinterCreatorSharedRoyalties is MinterCreatorSharedRoyaltiesBase {\\n\\n    uint256 private immutable _royaltyFeeNumeratorImmutable;\\n    uint256 private immutable _minterSharesImmutable;\\n    uint256 private immutable _creatorSharesImmutable;\\n    address private immutable _creatorImmutable;\\n    address private immutable _paymentSplitterReferenceImmutable;\\n\\n    /**\\n     * @dev Constructor that sets the royalty fee numerator, creator, and minter/creator shares.\\n     * @dev Throws when defaultRoyaltyFeeNumerator_ is greater than FEE_DENOMINATOR\\n     * @param royaltyFeeNumerator_ The royalty fee numerator\\n     * @param minterShares_  The number of shares minters get allocated in payment processors\\n     * @param creatorShares_ The number of shares creators get allocated in payment processors\\n     * @param creator_       The NFT creator's royalty wallet\\n     */\\n    constructor(\\n        uint256 royaltyFeeNumerator_, \\n        uint256 minterShares_, \\n        uint256 creatorShares_, \\n        address creator_,\\n        address paymentSplitterReference_) {\\n        _setRoyaltyFeeNumeratorAndShares(\\n            royaltyFeeNumerator_, \\n            minterShares_, \\n            creatorShares_, \\n            creator_, \\n            paymentSplitterReference_);\\n\\n        _royaltyFeeNumeratorImmutable = royaltyFeeNumerator_;\\n        _minterSharesImmutable = minterShares_;\\n        _creatorSharesImmutable = creatorShares_;\\n        _creatorImmutable = creator_;\\n        _paymentSplitterReferenceImmutable = paymentSplitterReference_;\\n    }\\n\\n    function royaltyFeeNumerator() public view override returns (uint256) {\\n        return _royaltyFeeNumeratorImmutable;\\n    }\\n\\n    function minterShares() public view override returns (uint256) {\\n        return _minterSharesImmutable;\\n    }\\n\\n    function creatorShares() public view override returns (uint256) {\\n        return _creatorSharesImmutable;\\n    }\\n\\n    function creator() public view override returns (address) {\\n        return _creatorImmutable;\\n    }\\n\\n    function paymentSplitterReference() public view override returns (address) {\\n        return _paymentSplitterReferenceImmutable;\\n    }\\n}\\n\\n/**\\n * @title MinterCreatorSharedRoyaltiesInitializable\\n * @author Limit Break, Inc.\\n * @notice Initializable MinterCreatorSharedRoyalties Contract implementation to allow for EIP-1167 clones. \\n */\\nabstract contract MinterCreatorSharedRoyaltiesInitializable is OwnablePermissions, MinterCreatorSharedRoyaltiesBase {\\n\\n    error MinterCreatorSharedRoyaltiesInitializable__RoyaltyFeeAndSharesAlreadyInitialized();\\n\\n    bool private _royaltyFeeAndSharesInitialized;\\n\\n    function initializeMinterRoyaltyFee(\\n        uint256 royaltyFeeNumerator_, \\n        uint256 minterShares_, \\n        uint256 creatorShares_, \\n        address creator_,\\n        address paymentSplitterReference_) public {\\n        _requireCallerIsContractOwner();\\n\\n        if(_royaltyFeeAndSharesInitialized) {\\n            revert MinterCreatorSharedRoyaltiesInitializable__RoyaltyFeeAndSharesAlreadyInitialized();\\n        }\\n\\n        _royaltyFeeAndSharesInitialized = true;\\n\\n        _setRoyaltyFeeNumeratorAndShares(\\n            royaltyFeeNumerator_, \\n            minterShares_, \\n            creatorShares_, \\n            creator_, \\n            paymentSplitterReference_);\\n    }\\n}\",\"keccak256\":\"0x6d12f5a519d1f63feaca1d815c0927a2463157f40c030beb55f1313c2f8e397a\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/programmable-royalties/helpers/IPaymentSplitterInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPaymentSplitterInitializable {\\n    function totalShares() external view returns (uint256);\\n    function totalReleased() external view returns (uint256);\\n    function totalReleased(IERC20 token) external view returns (uint256);\\n    function shares(address account) external view returns (uint256);\\n    function released(address account) external view returns (uint256);\\n    function released(IERC20 token, address account) external view returns (uint256);\\n    function payee(uint256 index) external view returns (address);\\n    function releasable(address account) external view returns (uint256);\\n    function releasable(IERC20 token, address account) external view returns (uint256);\\n    function initializePaymentSplitter(address[] calldata payees, uint256[] calldata shares_) external;\\n    function release(address payable account) external;\\n    function release(IERC20 token, address account) external;\\n}\",\"keccak256\":\"0x0b8a29946e132fde83b2cffda7a32ae6c097b517a014295d2549d84c422ae26a\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/token/erc721/ERC721OpenZeppelin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../access/OwnablePermissions.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nabstract contract ERC721OpenZeppelinBase is ERC721 {\\n\\n    // Token name\\n    string internal _contractName;\\n\\n    // Token symbol\\n    string internal _contractSymbol;\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _contractName;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _contractSymbol;\\n    }\\n\\n    function _setNameAndSymbol(string memory name_, string memory symbol_) internal {\\n        _contractName = name_;\\n        _contractSymbol = symbol_;\\n    }\\n}\\n\\nabstract contract ERC721OpenZeppelin is ERC721OpenZeppelinBase {\\n    constructor(string memory name_, string memory symbol_) ERC721(\\\"\\\", \\\"\\\") {\\n        _setNameAndSymbol(name_, symbol_);\\n    }\\n}\\n\\nabstract contract ERC721OpenZeppelinInitializable is OwnablePermissions, ERC721OpenZeppelinBase {\\n\\n    error ERC721OpenZeppelinInitializable__AlreadyInitializedERC721();\\n\\n    /// @notice Specifies whether or not the contract is initialized\\n    bool private _erc721Initialized;\\n\\n    /// @dev Initializes parameters of ERC721 tokens.\\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\\n    function initializeERC721(string memory name_, string memory symbol_) public virtual {\\n        _requireCallerIsContractOwner();\\n\\n        if(_erc721Initialized) {\\n            revert ERC721OpenZeppelinInitializable__AlreadyInitializedERC721();\\n        }\\n\\n        _erc721Initialized = true;\\n\\n        _setNameAndSymbol(name_, symbol_);\\n    }\\n}\\n\",\"keccak256\":\"0xe4e8fbf0cb6d2ba75790e4c0b4722612612937d9ab03f9df3fe3ad633cf0403c\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/utils/AutomaticValidatorTransferApproval.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../access/OwnablePermissions.sol\\\";\\n\\n/**\\n * @title AutomaticValidatorTransferApproval\\n * @author Limit Break, Inc.\\n * @notice Base contract mix-in that provides boilerplate code giving the contract owner the\\n *         option to automatically approve a 721-C transfer validator implementation for transfers.\\n */\\nabstract contract AutomaticValidatorTransferApproval is OwnablePermissions {\\n\\n    /// @dev Emitted when the automatic approval flag is modified by the creator.\\n    event AutomaticApprovalOfTransferValidatorSet(bool autoApproved);\\n\\n    /// @dev If true, the collection's transfer validator is automatically approved to transfer holder's tokens.\\n    bool public autoApproveTransfersFromValidator;\\n\\n    /**\\n     * @notice Sets if the transfer validator is automatically approved as an operator for all token owners.\\n     * \\n     * @dev    Throws when the caller is not the contract owner.\\n     * \\n     * @param autoApprove If true, the collection's transfer validator will be automatically approved to\\n     *                    transfer holder's tokens.\\n     */\\n    function setAutomaticApprovalOfTransfersFromValidator(bool autoApprove) external {\\n        _requireCallerIsContractOwner();\\n        autoApproveTransfersFromValidator = autoApprove;\\n        emit AutomaticApprovalOfTransferValidatorSet(autoApprove);\\n    }\\n}\",\"keccak256\":\"0x26c1348b843cd4031f19fd8f7659a84a0445bf6da4fc61e847e033fcd43c4cdd\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/utils/CreatorTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../access/OwnablePermissions.sol\\\";\\nimport \\\"../interfaces/ICreatorToken.sol\\\";\\nimport \\\"../interfaces/ICreatorTokenLegacy.sol\\\";\\nimport \\\"../interfaces/ITransferValidator.sol\\\";\\nimport \\\"./TransferValidation.sol\\\";\\nimport \\\"../interfaces/ITransferValidatorSetTokenType.sol\\\";\\n\\n/**\\n * @title CreatorTokenBase\\n * @author Limit Break, Inc.\\n * @notice CreatorTokenBaseV3 is an abstract contract that provides basic functionality for managing token \\n * transfer policies through an implementation of ICreatorTokenTransferValidator/ICreatorTokenTransferValidatorV2/ICreatorTokenTransferValidatorV3. \\n * This contract is intended to be used as a base for creator-specific token contracts, enabling customizable transfer \\n * restrictions and security policies.\\n *\\n * <h4>Features:</h4>\\n * <ul>Ownable: This contract can have an owner who can set and update the transfer validator.</ul>\\n * <ul>TransferValidation: Implements the basic token transfer validation interface.</ul>\\n *\\n * <h4>Benefits:</h4>\\n * <ul>Provides a flexible and modular way to implement custom token transfer restrictions and security policies.</ul>\\n * <ul>Allows creators to enforce policies such as account and codehash blacklists, whitelists, and graylists.</ul>\\n * <ul>Can be easily integrated into other token contracts as a base contract.</ul>\\n *\\n * <h4>Intended Usage:</h4>\\n * <ul>Use as a base contract for creator token implementations that require advanced transfer restrictions and \\n *   security policies.</ul>\\n * <ul>Set and update the ICreatorTokenTransferValidator implementation contract to enforce desired policies for the \\n *   creator token.</ul>\\n *\\n * <h4>Compatibility:</h4>\\n * <ul>Backward and Forward Compatible - V1/V2/V3 Creator Token Base will work with V1/V2/V3 Transfer Validators.</ul>\\n */\\nabstract contract CreatorTokenBase is OwnablePermissions, TransferValidation, ICreatorToken {\\n\\n    /// @dev Thrown when setting a transfer validator address that has no deployed code.\\n    error CreatorTokenBase__InvalidTransferValidatorContract();\\n\\n    /// @dev The default transfer validator that will be used if no transfer validator has been set by the creator.\\n    address public constant DEFAULT_TRANSFER_VALIDATOR = address(0x721C002B0059009a671D00aD1700c9748146cd1B);\\n\\n    /// @dev Used to determine if the default transfer validator is applied.\\n    /// @dev Set to true when the creator sets a transfer validator address.\\n    bool private isValidatorInitialized;\\n    /// @dev Address of the transfer validator to apply to transactions.\\n    address private transferValidator;\\n\\n    constructor() {\\n        _emitDefaultTransferValidator();\\n        _registerTokenType(DEFAULT_TRANSFER_VALIDATOR);\\n    }\\n\\n    /**\\n     * @notice Sets the transfer validator for the token contract.\\n     *\\n     * @dev    Throws when provided validator contract is not the zero address and does not have code.\\n     * @dev    Throws when the caller is not the contract owner.\\n     *\\n     * @dev    <h4>Postconditions:</h4>\\n     *         1. The transferValidator address is updated.\\n     *         2. The `TransferValidatorUpdated` event is emitted.\\n     *\\n     * @param transferValidator_ The address of the transfer validator contract.\\n     */\\n    function setTransferValidator(address transferValidator_) public {\\n        _requireCallerIsContractOwner();\\n\\n        bool isValidTransferValidator = transferValidator_.code.length > 0;\\n\\n        if(transferValidator_ != address(0) && !isValidTransferValidator) {\\n            revert CreatorTokenBase__InvalidTransferValidatorContract();\\n        }\\n\\n        emit TransferValidatorUpdated(address(getTransferValidator()), transferValidator_);\\n\\n        isValidatorInitialized = true;\\n        transferValidator = transferValidator_;\\n\\n        _registerTokenType(transferValidator_);\\n    }\\n\\n    /**\\n     * @notice Returns the transfer validator contract address for this token contract.\\n     */\\n    function getTransferValidator() public view override returns (address validator) {\\n        validator = transferValidator;\\n\\n        if (validator == address(0)) {\\n            if (!isValidatorInitialized) {\\n                validator = DEFAULT_TRANSFER_VALIDATOR;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Pre-validates a token transfer, reverting if the transfer is not allowed by this token's security policy.\\n     *      Inheriting contracts are responsible for overriding the _beforeTokenTransfer function, or its equivalent\\n     *      and calling _validateBeforeTransfer so that checks can be properly applied during token transfers.\\n     *\\n     * @dev Be aware that if the msg.sender is the transfer validator, the transfer is automatically permitted, as the\\n     *      transfer validator is expected to pre-validate the transfer.\\n     *\\n     * @dev Throws when the transfer doesn't comply with the collection's transfer policy, if the transferValidator is\\n     *      set to a non-zero address.\\n     *\\n     * @param caller  The address of the caller.\\n     * @param from    The address of the sender.\\n     * @param to      The address of the receiver.\\n     * @param tokenId The token id being transferred.\\n     */\\n    function _preValidateTransfer(\\n        address caller, \\n        address from, \\n        address to, \\n        uint256 tokenId, \\n        uint256 /*value*/) internal virtual override {\\n        address validator = getTransferValidator();\\n\\n        if (validator != address(0)) {\\n            if (msg.sender == validator) {\\n                return;\\n            }\\n\\n            ITransferValidator(validator).validateTransfer(caller, from, to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Pre-validates a token transfer, reverting if the transfer is not allowed by this token's security policy.\\n     *      Inheriting contracts are responsible for overriding the _beforeTokenTransfer function, or its equivalent\\n     *      and calling _validateBeforeTransfer so that checks can be properly applied during token transfers.\\n     *\\n     * @dev Be aware that if the msg.sender is the transfer validator, the transfer is automatically permitted, as the\\n     *      transfer validator is expected to pre-validate the transfer.\\n     * \\n     * @dev Used for ERC20 and ERC1155 token transfers which have an amount value to validate in the transfer validator.\\n     * @dev The `tokenId` for ERC20 tokens should be set to `0`.\\n     *\\n     * @dev Throws when the transfer doesn't comply with the collection's transfer policy, if the transferValidator is\\n     *      set to a non-zero address.\\n     *\\n     * @param caller  The address of the caller.\\n     * @param from    The address of the sender.\\n     * @param to      The address of the receiver.\\n     * @param tokenId The token id being transferred.\\n     * @param amount  The amount of token being transferred.\\n     */\\n    function _preValidateTransfer(\\n        address caller, \\n        address from, \\n        address to, \\n        uint256 tokenId, \\n        uint256 amount,\\n        uint256 /*value*/) internal virtual override {\\n        address validator = getTransferValidator();\\n\\n        if (validator != address(0)) {\\n            if (msg.sender == validator) {\\n                return;\\n            }\\n\\n            ITransferValidator(validator).validateTransfer(caller, from, to, tokenId, amount);\\n        }\\n    }\\n\\n    function _tokenType() internal virtual pure returns(uint16);\\n\\n    function _registerTokenType(address validator) internal {\\n        if (validator != address(0)) {\\n            uint256 validatorCodeSize;\\n            assembly {\\n                validatorCodeSize := extcodesize(validator)\\n            }\\n            if(validatorCodeSize > 0) {\\n                try ITransferValidatorSetTokenType(validator).setTokenTypeOfCollection(address(this), _tokenType()) {\\n                } catch { }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev  Used during contract deployment for constructable and cloneable creator tokens\\n     * @dev  to emit the `TransferValidatorUpdated` event signaling the validator for the contract\\n     * @dev  is the default transfer validator.\\n     */\\n    function _emitDefaultTransferValidator() internal {\\n        emit TransferValidatorUpdated(address(0), DEFAULT_TRANSFER_VALIDATOR);\\n    }\\n}\\n\",\"keccak256\":\"0x2f4a288bc8f4dc73386434f879e6248b03938568d629427f0beb70f148712296\",\"license\":\"MIT\"},\"@limitbreak/creator-token-standards/src/utils/TransferValidation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title TransferValidation\\n * @author Limit Break, Inc.\\n * @notice A mix-in that can be combined with ERC-721 contracts to provide more granular hooks.\\n * Openzeppelin's ERC721 contract only provides hooks for before and after transfer.  This allows\\n * developers to validate or customize transfers within the context of a mint, a burn, or a transfer.\\n */\\nabstract contract TransferValidation is Context {\\n    \\n    /// @dev Thrown when the from and to address are both the zero address.\\n    error ShouldNotMintToBurnAddress();\\n\\n    /*************************************************************************/\\n    /*                      Transfers Without Amounts                        */\\n    /*************************************************************************/\\n\\n    /// @dev Inheriting contracts should call this function in the _beforeTokenTransfer function to get more granular hooks.\\n    function _validateBeforeTransfer(address from, address to, uint256 tokenId) internal virtual {\\n        bool fromZeroAddress = from == address(0);\\n        bool toZeroAddress = to == address(0);\\n\\n        if(fromZeroAddress && toZeroAddress) {\\n            revert ShouldNotMintToBurnAddress();\\n        } else if(fromZeroAddress) {\\n            _preValidateMint(_msgSender(), to, tokenId, msg.value);\\n        } else if(toZeroAddress) {\\n            _preValidateBurn(_msgSender(), from, tokenId, msg.value);\\n        } else {\\n            _preValidateTransfer(_msgSender(), from, to, tokenId, msg.value);\\n        }\\n    }\\n\\n    /// @dev Inheriting contracts should call this function in the _afterTokenTransfer function to get more granular hooks.\\n    function _validateAfterTransfer(address from, address to, uint256 tokenId) internal virtual {\\n        bool fromZeroAddress = from == address(0);\\n        bool toZeroAddress = to == address(0);\\n\\n        if(fromZeroAddress && toZeroAddress) {\\n            revert ShouldNotMintToBurnAddress();\\n        } else if(fromZeroAddress) {\\n            _postValidateMint(_msgSender(), to, tokenId, msg.value);\\n        } else if(toZeroAddress) {\\n            _postValidateBurn(_msgSender(), from, tokenId, msg.value);\\n        } else {\\n            _postValidateTransfer(_msgSender(), from, to, tokenId, msg.value);\\n        }\\n    }\\n\\n    /// @dev Optional validation hook that fires before a mint\\n    function _preValidateMint(address caller, address to, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires after a mint\\n    function _postValidateMint(address caller, address to, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires before a burn\\n    function _preValidateBurn(address caller, address from, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires after a burn\\n    function _postValidateBurn(address caller, address from, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires before a transfer\\n    function _preValidateTransfer(address caller, address from, address to, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires after a transfer\\n    function _postValidateTransfer(address caller, address from, address to, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /*************************************************************************/\\n    /*                         Transfers With Amounts                        */\\n    /*************************************************************************/\\n\\n    /// @dev Inheriting contracts should call this function in the _beforeTokenTransfer function to get more granular hooks.\\n    function _validateBeforeTransfer(address from, address to, uint256 tokenId, uint256 amount) internal virtual {\\n        bool fromZeroAddress = from == address(0);\\n        bool toZeroAddress = to == address(0);\\n\\n        if(fromZeroAddress && toZeroAddress) {\\n            revert ShouldNotMintToBurnAddress();\\n        } else if(fromZeroAddress) {\\n            _preValidateMint(_msgSender(), to, tokenId, amount, msg.value);\\n        } else if(toZeroAddress) {\\n            _preValidateBurn(_msgSender(), from, tokenId, amount, msg.value);\\n        } else {\\n            _preValidateTransfer(_msgSender(), from, to, tokenId, amount, msg.value);\\n        }\\n    }\\n\\n    /// @dev Inheriting contracts should call this function in the _afterTokenTransfer function to get more granular hooks.\\n    function _validateAfterTransfer(address from, address to, uint256 tokenId, uint256 amount) internal virtual {\\n        bool fromZeroAddress = from == address(0);\\n        bool toZeroAddress = to == address(0);\\n\\n        if(fromZeroAddress && toZeroAddress) {\\n            revert ShouldNotMintToBurnAddress();\\n        } else if(fromZeroAddress) {\\n            _postValidateMint(_msgSender(), to, tokenId, amount, msg.value);\\n        } else if(toZeroAddress) {\\n            _postValidateBurn(_msgSender(), from, tokenId, amount, msg.value);\\n        } else {\\n            _postValidateTransfer(_msgSender(), from, to, tokenId, amount, msg.value);\\n        }\\n    }\\n\\n    /// @dev Optional validation hook that fires before a mint\\n    function _preValidateMint(address caller, address to, uint256 tokenId, uint256 amount, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires after a mint\\n    function _postValidateMint(address caller, address to, uint256 tokenId, uint256 amount, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires before a burn\\n    function _preValidateBurn(address caller, address from, uint256 tokenId, uint256 amount, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires after a burn\\n    function _postValidateBurn(address caller, address from, uint256 tokenId, uint256 amount, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires before a transfer\\n    function _preValidateTransfer(address caller, address from, address to, uint256 tokenId, uint256 amount, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires after a transfer\\n    function _postValidateTransfer(address caller, address from, address to, uint256 tokenId, uint256 amount, uint256 value) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4f004a0a7bdd85c2a05ef27b8bfa4be4b0ff132b99e6bdb315ef346e1fd501a9\",\"license\":\"MIT\"},\"@limitbreak/permit-c/src/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @dev Constant bytes32 value of 0x000...000\\nbytes32 constant ZERO_BYTES32 = bytes32(0);\\n\\n/// @dev Constant value of 0\\nuint256 constant ZERO = 0;\\n/// @dev Constant value of 1\\nuint256 constant ONE = 1;\\n\\n/// @dev Constant value representing an open order in storage\\nuint8 constant ORDER_STATE_OPEN = 0;\\n/// @dev Constant value representing a filled order in storage\\nuint8 constant ORDER_STATE_FILLED = 1;\\n/// @dev Constant value representing a cancelled order in storage\\nuint8 constant ORDER_STATE_CANCELLED = 2;\\n\\n/// @dev Constant value representing the ERC721 token type for signatures and transfer hooks\\nuint256 constant TOKEN_TYPE_ERC721 = 721;\\n/// @dev Constant value representing the ERC1155 token type for signatures and transfer hooks\\nuint256 constant TOKEN_TYPE_ERC1155 = 1155;\\n/// @dev Constant value representing the ERC20 token type for signatures and transfer hooks\\nuint256 constant TOKEN_TYPE_ERC20 = 20;\\n\\n/// @dev Constant value to mask the upper bits of a signature that uses a packed `vs` value to extract `s`\\nbytes32 constant UPPER_BIT_MASK = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n/// @dev EIP-712 typehash used for validating signature based stored approvals\\nbytes32 constant UPDATE_APPROVAL_TYPEHASH =\\n    keccak256(\\\"UpdateApprovalBySignature(uint256 tokenType,address token,uint256 id,uint256 amount,uint256 nonce,address operator,uint256 approvalExpiration,uint256 sigDeadline,uint256 masterNonce)\\\");\\n\\n/// @dev EIP-712 typehash used for validating a single use permit without additional data\\nbytes32 constant SINGLE_USE_PERMIT_TYPEHASH =\\n    keccak256(\\\"PermitTransferFrom(uint256 tokenType,address token,uint256 id,uint256 amount,uint256 nonce,address operator,uint256 expiration,uint256 masterNonce)\\\");\\n\\n/// @dev EIP-712 typehash used for validating a single use permit with additional data\\nstring constant SINGLE_USE_PERMIT_TRANSFER_ADVANCED_TYPEHASH_STUB =\\n    \\\"PermitTransferFromWithAdditionalData(uint256 tokenType,address token,uint256 id,uint256 amount,uint256 nonce,address operator,uint256 expiration,uint256 masterNonce,\\\";\\n\\n/// @dev EIP-712 typehash used for validating an order permit that updates storage as it fills\\nstring constant PERMIT_ORDER_ADVANCED_TYPEHASH_STUB =\\n    \\\"PermitOrderWithAdditionalData(uint256 tokenType,address token,uint256 id,uint256 amount,uint256 salt,address operator,uint256 expiration,uint256 masterNonce,\\\";\\n\\n/// @dev Pausable flag for stored approval transfers of ERC721 assets\\nuint256 constant PAUSABLE_APPROVAL_TRANSFER_FROM_ERC721 = 1 << 0;\\n/// @dev Pausable flag for stored approval transfers of ERC1155 assets\\nuint256 constant PAUSABLE_APPROVAL_TRANSFER_FROM_ERC1155 = 1 << 1;\\n/// @dev Pausable flag for stored approval transfers of ERC20 assets\\nuint256 constant PAUSABLE_APPROVAL_TRANSFER_FROM_ERC20 = 1 << 2;\\n\\n/// @dev Pausable flag for single use permit transfers of ERC721 assets\\nuint256 constant PAUSABLE_PERMITTED_TRANSFER_FROM_ERC721 = 1 << 3;\\n/// @dev Pausable flag for single use permit transfers of ERC1155 assets\\nuint256 constant PAUSABLE_PERMITTED_TRANSFER_FROM_ERC1155 = 1 << 4;\\n/// @dev Pausable flag for single use permit transfers of ERC20 assets\\nuint256 constant PAUSABLE_PERMITTED_TRANSFER_FROM_ERC20 = 1 << 5;\\n\\n/// @dev Pausable flag for order fill transfers of ERC1155 assets\\nuint256 constant PAUSABLE_ORDER_TRANSFER_FROM_ERC1155 = 1 << 6;\\n/// @dev Pausable flag for order fill transfers of ERC20 assets\\nuint256 constant PAUSABLE_ORDER_TRANSFER_FROM_ERC20 = 1 << 7;\",\"keccak256\":\"0x07ddd047b1e1c7bdaf1e2bed3d8a9352bd8471b968379c12bc1e49321c561871\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/EthereumNorthStar.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@limitbreak/creator-token-standards/src/access/OwnableBasic.sol\\\";\\nimport \\\"@limitbreak/creator-token-standards/src/erc721c/ERC721C.sol\\\";\\nimport \\\"@limitbreak/creator-token-standards/src/programmable-royalties/MinterCreatorSharedRoyalties.sol\\\";\\n\\ncontract EthereumNorthStar is OwnableBasic, ERC721C, MinterCreatorSharedRoyalties {\\n    using Strings for uint256;\\n\\n    uint256 public constant MAX_SUPPLY = 7500;\\n    uint256 public tokenCounter = 0;\\n\\n    mapping(address => uint256) public mintedTokens;\\n\\n    struct Colors {\\n        string leftHalf;\\n        string rightHalf;\\n    }\\n\\n    mapping(uint256 => Colors) private tokenColors;\\n    mapping(bytes32 => bool) private colorCombinations; // To track existing combinations\\n\\n    constructor(\\n        uint256 royaltyFeeNumerator_,\\n        uint256 minterShares_,\\n        uint256 creatorShares_,\\n        address creator_,\\n        address paymentSplitterReference_,\\n        string memory name_,\\n        string memory symbol_\\n    )\\n        ERC721OpenZeppelin(name_, symbol_)\\n        MinterCreatorSharedRoyalties(royaltyFeeNumerator_, minterShares_, creatorShares_, creator_, paymentSplitterReference_)\\n    {}\\n\\n    function mint(string memory leftColor, string memory rightColor) public {\\n        require(tokenCounter < MAX_SUPPLY, \\\"Max supply reached\\\");\\n        require(mintedTokens[msg.sender] < 10, \\\"Max 10 NFTs per wallet\\\");\\n\\n        bytes32 colorHash = keccak256(abi.encodePacked(leftColor, rightColor));\\n        require(!colorCombinations[colorHash], \\\"Color combination already exists\\\");\\n\\n        uint256 tokenId = tokenCounter;\\n        _safeMint(msg.sender, tokenId);\\n\\n        tokenColors[tokenId] = Colors(leftColor, rightColor);\\n        colorCombinations[colorHash] = true; // Mark the combination as used\\n\\n        tokenCounter += 1;\\n        mintedTokens[msg.sender] += 1;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n\\n        Colors memory colors = tokenColors[tokenId];\\n        string memory svgImage = string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"600\\\" height=\\\"600\\\">',\\n                '<rect width=\\\"600\\\" height=\\\"600\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<g transform=\\\"translate(50,50)\\\">',\\n                // Left Half\\n                '<defs><clipPath id=\\\"lefthalf\\\"><rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"250\\\" height=\\\"500\\\"/></clipPath></defs>',\\n                '<circle cx=\\\"250\\\" cy=\\\"250\\\" r=\\\"250\\\" fill=\\\"', colors.leftHalf, '\\\" clip-path=\\\"url(#lefthalf)\\\"/>',\\n\\n                '<defs>',\\n                    '<filter id=\\\"f1\\\" x=\\\"-10%\\\" y=\\\"-10%\\\">',\\n                        '<feGaussianBlur in=\\\"SourceGraphic\\\" stdDeviation=\\\"10\\\"/>',\\n                    '</filter>',\\n                '</defs>',\\n                '<circle cx=\\\"252\\\" cy=\\\"250\\\" r=\\\"250\\\" fill=\\\"', colors.leftHalf, '\\\"  filter=\\\"url(#f1)\\\"/>',\\n\\n                // Right Half\\n                '<defs><clipPath id=\\\"righthalf\\\"><rect x=\\\"250\\\" y=\\\"0\\\" width=\\\"250\\\" height=\\\"500\\\"/></clipPath></defs>',\\n                '<circle cx=\\\"250\\\" cy=\\\"250\\\" r=\\\"250\\\" fill=\\\"', colors.rightHalf, '\\\" clip-path=\\\"url(#righthalf)\\\"/>',\\n                // Small Circles\\n                '<circle cx=\\\"250\\\" cy=\\\"125\\\" r=\\\"125\\\" fill=\\\"', colors.leftHalf, '\\\"/>',\\n                '<circle cx=\\\"250\\\" cy=\\\"375\\\" r=\\\"125\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<circle cx=\\\"250\\\" cy=\\\"125\\\" r=\\\"35\\\" fill=\\\"', colors.rightHalf, '\\\"/>',\\n                // '<circle cx=\\\"250\\\" cy=\\\"375\\\" r=\\\"35\\\" fill=\\\"', colors.leftHalf, '\\\"/>',\\n                \\n\\n                '<rect x=\\\"235\\\" y=\\\"109\\\" width=\\\"30\\\" height=\\\"3\\\" z=\\\"10\\\" fill=\\\"', colors.leftHalf, '\\\" />',\\n                '<rect x=\\\"237\\\" y=\\\"124\\\" width=\\\"26\\\" height=\\\"3\\\" z=\\\"10\\\" fill=\\\"', colors.leftHalf, '\\\" />',\\n                '<rect x=\\\"235\\\" y=\\\"139\\\" width=\\\"30\\\" height=\\\"3\\\" z=\\\"10\\\" fill=\\\"', colors.leftHalf, '\\\" />',\\n\\n                '<circle cx=\\\"250\\\" cy=\\\"375\\\" r=\\\"35\\\" fill=\\\"', colors.leftHalf, '\\\" />',\\n                '<rect x=\\\"235\\\" y=\\\"360\\\" width=\\\"30\\\" height=\\\"30\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<rect x=\\\"230\\\" y=\\\"366\\\" width=\\\"40\\\" height=\\\"2\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<rect x=\\\"230\\\" y=\\\"370\\\" width=\\\"40\\\" height=\\\"2\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<rect x=\\\"230\\\" y=\\\"374\\\" width=\\\"40\\\" height=\\\"2\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<rect x=\\\"230\\\" y=\\\"378\\\" width=\\\"40\\\" height=\\\"2\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<rect x=\\\"230\\\" y=\\\"382\\\" width=\\\"40\\\" height=\\\"2\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n\\n                '<rect x=\\\"249\\\" y=\\\"355\\\" width=\\\"2\\\" height=\\\"40\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<rect x=\\\"253\\\" y=\\\"355\\\" width=\\\"2\\\" height=\\\"40\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<rect x=\\\"257\\\" y=\\\"355\\\" width=\\\"2\\\" height=\\\"40\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<rect x=\\\"245\\\" y=\\\"355\\\" width=\\\"2\\\" height=\\\"40\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<rect x=\\\"241\\\" y=\\\"355\\\" width=\\\"2\\\" height=\\\"40\\\" fill=\\\"', colors.rightHalf, '\\\" />',\\n                '<rect x=\\\"241\\\" y=\\\"366\\\" width=\\\"18\\\" height=\\\"18\\\" fill=\\\"none\\\" stroke-width=\\\"2\\\" stroke=\\\"', colors.leftHalf, '\\\"/>',\\n                \\n\\n                '<defs><path id=\\\"s-curve\\\" d=\\\"M290,20 A240,240 0 0,1 290,480\\\"  fill=\\\"none\\\" stroke=\\\"none\\\" /></defs>',\\n                   \\n                '<text font-size=\\\"28\\\" fill=\\\"', colors.leftHalf, '\\\">',\\n                '<textPath href=\\\"#s-curve\\\" startOffset=\\\"30%\\\" >',\\n                    'ETH is money',\\n                '</textPath>',\\n                '</text>',\\n                \\n                '<defs>',\\n                    '<path id=\\\"s-curve-reverse\\\" d=\\\"M50,350 A240,240 0 0,1 300,33\\\"  fill=\\\"none\\\" stroke=\\\"none\\\" />',\\n                '</defs>',\\n                \\n                '<text font-size=\\\"24\\\" fill=\\\"', colors.rightHalf, '\\\">',\\n                '<textPath href=\\\"#s-curve-reverse\\\" startOffset=\\\"10%\\\">',\\n                    'Ethereum is the world computer',\\n                '</textPath>',\\n                '</text>',\\n\\n\\n                '</g>',\\n                '</svg>'\\n            )\\n        );\\n\\n        string memory imageBase64 = Base64.encode(bytes(svgImage));\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"Ethereum North Star #',\\n                        tokenId.toString(),\\n                        '\\\", \\\"description\\\": \\\"An onchain Ethereum North Star NFT.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        imageBase64,\\n                        '\\\"}'\\n                    )\\n                )\\n            )\\n        );\\n\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n\\n    function getColors(uint256 tokenId) public view returns (Colors memory) {\\n        require(_exists(tokenId), \\\"Token does not exist\\\");\\n        return tokenColors[tokenId];\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function burn(uint256 tokenId) external {\\n        _burn(tokenId);\\n\\n        Colors memory colors = tokenColors[tokenId];\\n        bytes32 colorHash = keccak256(abi.encodePacked(colors.leftHalf, colors.rightHalf));\\n        delete colorCombinations[colorHash]; // Free up the color combination\\n    }\\n\\n    function _mint(address to, uint256 tokenId) internal virtual override {\\n        _onMinted(to, tokenId);\\n        super._mint(to, tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _onBurned(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721C, MinterCreatorSharedRoyaltiesBase) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x4bdbd42952880603a706de3029e402f56708e5978886f6bf47d52f54a26f582f\"}},\"version\":1}",
  "bytecode": "0x610120604081815234620008ed5760006200463d803803809162000024828762000924565b853983019260e081850312620008e9578051602082015184830151916200004e6060850162000948565b936200005d6080820162000948565b60a08201519098906001600160401b0381116200049c5781620000829184016200095d565b60c083015190926001600160401b038211620008e557620000a59291016200095d565b908751620000b381620008f2565b878152885190620000c482620008f2565b8882528051906001600160401b038211620008d1578954600181811c91168015620008c6575b6020821014620008b2579081601f8493116200085d575b50602090601f8311600114620007f4578b92620007e8575b50508160011b916000199060031b1c19161788555b8051906001600160401b038211620007d457600154600181811c91168015620007c9575b6020821014620007b5579081601f84931162000753575b50602090601f8311600114620006dc578a92620006d0575b50508160011b916000199060031b1c1916176001555b8051906001600160401b038211620006bc57600654600181811c91168015620006b1575b60208210146200069d579081601f8493116200063b575b50602090601f8311600114620005c4578992620005b8575b50508160011b916000199060031b1c1916176006555b8051906001600160401b038211620005a457600754600181811c9116801562000599575b602082101462000585579081601f84931162000523575b50602090601f8311600114620004ac578892620004a0575b50508160011b916000199060031b1c1916176007555b60088054336001600160a01b0319808316821790935588516001600160a01b03939290919084167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08a80a38781527fcc5dc080ff977b3c3a211fa63ab74f90f658f5ba9d3236e92c8f59570f442aac8973721c002b0059009a671d00ad1700c9748146cd1b92836020820152a1803b62000439575b50612710831162000428578315620004175784156200040657818616918215620003f5578916918215620003e45783600a5584600b5585600c5581600d541617600d55600e541617600e5560805260a05260c05260e05261010092835260125551613c089182620009d5833960805182818161215a01526126fb015260a051828181611a1301528181611f1d0152612572015260c0518281816117ca015281816119f20152611f48015260e05182818161198c015281816126710152818161282b01528181612b5f01528181612fb401526130c201525181818161193101526121130152f35b88516322ca44ff60e11b8152600490fd5b88516382d6f02560e01b8152600490fd5b8751632a3ccc4960e01b8152600490fd5b875163774439b360e01b8152600490fd5b8751633eca614760e01b8152600490fd5b803b156200049c5787809160448b518094819363fb2de5d760e01b83523060048401526102d160248401525af115620002fe579096906001600160401b038111620004885788529538620002fe565b634e487b7160e01b82526041600452602482fd5b8780fd5b01519050388062000253565b60078952600080516020620045dd8339815191529250601f198416895b8181106200050a5750908460019594939210620004f0575b505050811b0160075562000269565b015160001960f88460031b161c19169055388080620004e1565b92936020600181928786015181550195019301620004c9565b60078952909150600080516020620045dd833981519152601f840160051c810191602085106200057a575b90601f859493920160051c01905b8181106200056b57506200023b565b8981558493506001016200055c565b90915081906200054e565b634e487b7160e01b88526022600452602488fd5b90607f169062000224565b634e487b7160e01b87526041600452602487fd5b015190503880620001ea565b60068a526000805160206200461d8339815191529250601f1984168a5b81811062000622575090846001959493921062000608575b505050811b0160065562000200565b015160001960f88460031b161c19169055388080620005f9565b92936020600181928786015181550195019301620005e1565b60068a529091506000805160206200461d833981519152601f840160051c8101916020851062000692575b90601f859493920160051c01905b818110620006835750620001d2565b8a815584935060010162000674565b909150819062000666565b634e487b7160e01b89526022600452602489fd5b90607f1690620001bb565b634e487b7160e01b88526041600452602488fd5b01519050388062000181565b60018b52600080516020620045fd8339815191529250601f1984168b5b8181106200073a575090846001959493921062000720575b505050811b0160015562000197565b015160001960f88460031b161c1916905538808062000711565b92936020600181928786015181550195019301620006f9565b60018b52909150600080516020620045fd833981519152601f840160051c81019160208510620007aa575b90601f859493920160051c01905b8181106200079b575062000169565b8b81558493506001016200078c565b90915081906200077e565b634e487b7160e01b8a52602260045260248afd5b90607f169062000152565b634e487b7160e01b89526041600452602489fd5b01519050388062000119565b8b805260208c209250601f1984168c5b8181106200084457509084600195949392106200082a575b505050811b0188556200012e565b015160001960f88460031b161c191690553880806200081c565b9293602060018192878601518155019501930162000804565b9091508a805260208b20601f840160051c81019160208510620008a7575b90601f859493920160051c01905b81811062000898575062000101565b8c815584935060010162000889565b90915081906200087b565b634e487b7160e01b8b52602260045260248bfd5b90607f1690620000ea565b634e487b7160e01b8a52604160045260248afd5b8880fd5b5080fd5b600080fd5b602081019081106001600160401b038211176200090e57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200090e57604052565b51906001600160a01b0382168203620008ed57565b919080601f84011215620008ed578251906001600160401b0382116200090e576040519160209162000999601f8301601f191684018562000924565b818452828287010111620008ed5760005b818110620009c057508260009394955001015290565b8581018301518482018401528201620009aa56fe608080604052600436101561001357600080fd5b600090813560e01c9081630146354614612c495750806301ffc9a714612b8e57806302d05d3f14612b4957806306fdde0314612a78578063081812fc14612a59578063095ea7b3146128f2578063098144d4146128d75780630d705df6146128af57806323b872dd1461288a578063261a2f30146127605780632a55205a146126d857806332cb6b0c146126bb57806333c93f58146125af57806336d396f4146125955780633bdec33e1461255a57806342842e0e1461252757806342966c68146123565780636221d13c146123305780636352211e146122ff5780636b6b3c63146122cc57806370a0823114612236578063715018a6146121d85780637241dfa01461219f57806377f33fe91461217d57806381ddcc1f1461214257806386c24508146120fd5780638aa0fdad146118165780638da5cb5b146117ed578063939a6c1c146117b257806395d89b41146116d05780639e05d240146116625780639e942ace1461162f578063a22cb46514611558578063a9fc664e14611447578063b88d4fde146113ba578063c87b56dd14610471578063d082e38114610453578063d73792a914610436578063e985e9c5146103ff578063ee62ad6314610370578063f2fde38b146102aa5763f3119682146101ef57600080fd5b346102a7576020806003193601126102a35761029f60408093600435606085845161021981612d85565b8281520152600081815260026020526040902054610241906001600160a01b0316151561394b565b815260148452209161028c61026e600186519561025d87612d85565b61026681613176565b875201613176565b91808501928352855195869582875251918601526060850190612c9a565b9051838203601f19016040850152612c9a565b0390f35b5080fd5b80fd5b50346102a75760203660031901126102a7576102c4612cbf565b6102cc61325a565b6001600160a01b0390811690811561031c57600854826001600160601b0360a01b821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346102a7576020806003193601126102a3576001600160a01b039182610395612cbf565b16815260118252604081209260405193848592858354928381520192855285852094905b868383106103e35785906103cf82870383612dd6565b61029f604051928284938452830190612e67565b86548216855260019687019689965094019391909101906103b9565b50346102a75760403660031901126102a757602061042c61041e612cbf565b610426612cd5565b90612ea4565b6040519015158152f35b50346102a757806003193601126102a75760206040516127108152f35b50346102a757806003193601126102a7576020601254604051908152f35b50346102a757602090816003193601126102a7576004356000818152600260205260409020546104ab906001600160a01b0316151561394b565b8082526014835260408220906111356040516104c681612d85565b6104cf84613176565b81526111306105e46104e46001809701613176565b92838982015251926040519384917f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f32308b8401527f30302f737667222077696474683d2236303022206865696768743d22363030226040840152601f60f91b60608401527f3c726563742077696474683d2236303022206865696768743d2236303022206660618401526434b6361e9160d91b60818401528051918b820192610590816086870186612c77565b631110179f60e11b60869186019182018190527f3c67207472616e73666f726d3d227472616e736c6174652835302c353029223e608a8301527f3c646566733e3c636c6970506174682069643d226c65667468616c66223e3c7260aa8301527f65637420783d22302220793d2230222077696474683d2232353022206865696760ca8301527f68743d22353030222f3e3c2f636c6970506174683e3c2f646566733e0000000060ea8301527f3c636972636c652063783d22323530222063793d223235302220723d223235306101068301526711103334b6361e9160c11b610126830152919061012e018151828f019161068b828285612c77565b01937f2220636c69702d706174683d2275726c28236c65667468616c6629222f3e00008552651e3232b3399f60d11b9485601e8201527f3c66696c7465722069643d2266312220783d222d3130252220793d222d31302560248201528661111f60f11b9482866044819501527f3c6665476175737369616e426c757220696e3d22536f7572636547726170686960468201527531911039ba322232bb34b0ba34b7b71e91189811179f60511b6066820152681e17b334b63a32b91f60b91b607c820152661e17b232b3399f60c91b978860858301527f3c636972636c652063783d22323532222063793d223235302220723d22323530608c830152866108806101296711103334b6361e9160c11b948560ac8201528651906107b18260b4830187612c77565b01751110103334b63a32b91e913ab9361411b3189491179f60511b60b48201527f3c646566733e3c636c6970506174682069643d22726967687468616c66223e3c60ca8201527f7265637420783d223235302220793d2230222077696474683d2232353022206860ea8201527f65696768743d22353030222f3e3c2f636c6970506174683e3c2f646566733e0061010a820152016028907f3c636972636c652063783d22323530222063793d223235302220723d2232353081526711103334b6361e9160c11b60208201520190565b87519061088e828289612c77565b017f2220636c69702d706174683d2275726c2823726967687468616c6629222f3e0081527f3c636972636c652063783d22323530222063793d223132352220723d22313235601f82015283603f8201528451906108ef826047830185612c77565b016211179f60e91b938460478301527f3c636972636c652063783d22323530222063793d223337352220723d22313235604a830152606a82015287519061093a826072830189612c77565b018260728201527f3c636972636c652063783d22323530222063793d223132352220723d22333522607682015266103334b6361e9160c91b9081609682015288519061098a82609d83018a612c77565b0184609d8201527f3c7265637420783d223233352220793d22313039222077696474683d2233302260a0820152837f206865696768743d223322207a3d223130222066696c6c3d2200000000000000918260c08201528751906109f18260d9830188612c77565b018160d98201527f3c7265637420783d223233372220793d22313234222077696474683d2232362260dd8201528260fd820152875190610a38826101169788840190612c77565b01938401527f3c7265637420783d223233352220793d22313339222077696474683d2233302261011a84015261013a83015282855161015393610a7f828d87840190612c77565b01928301527f3c636972636c652063783d22323530222063793d223337352220723d2233352261015783015261017782015281845161017e92610ac5828583018d612c77565b01918201527f3c7265637420783d223233352220793d22333630222077696474683d2233302261018282015272103432b4b3b43a1e91199811103334b6361e9160691b6101a28201528187516101b592610b22828583018a612c77565b01918201527f3c7265637420783d223233302220793d22333636222077696474683d223430226101b982015271103432b4b3b43a1e911911103334b6361e9160711b806101d98301528288516101eb93610b7f828683018b612c77565b01928301527f3c7265637420783d223233302220793d22333730222077696474683d223430226101ef8301528061020f83015282885161022193610bc6828683018b612c77565b01928301527f3c7265637420783d223233302220793d22333734222077696474683d223430226102258301528061024583015282885161025793610c0d828683018b612c77565b01928301527f3c7265637420783d223233302220793d22333738222077696474683d2234302261025b8301528061027b83015282885161028d93610c54828683018b612c77565b01928301527f3c7265637420783d223233302220793d22333832222077696474683d223430226102918301526102b18201528187516102c392610c9a828583018a612c77565b01918201527f3c7265637420783d223234392220793d22333535222077696474683d223222206102c7820152713432b4b3b43a1e911a1811103334b6361e9160711b806102e78301528288516102f993610cf7828683018b612c77565b01928301527f3c7265637420783d223235332220793d22333535222077696474683d223222206102fd8301528061031d83015282885161032f93610d3e828683018b612c77565b01928301527f3c7265637420783d223235372220793d22333535222077696474683d223222206103338301528061035383015282885161036593610d85828683018b612c77565b01928301527f3c7265637420783d223234352220793d22333535222077696474683d223222206103698301528061038983015282885161039b93610dcc828683018b612c77565b01928301527f3c7265637420783d223234312220793d22333535222077696474683d2232222061039f8301526103bf820152865190610e12826103d19788840190612c77565b01938401527f3c7265637420783d223234312220793d22333636222077696474683d223138226103d58401527f206865696768743d223138222066696c6c3d226e6f6e6522207374726f6b652d6103f5840152713bb4b23a341e9119111039ba3937b5b29e9160711b610415840152815161042793610e94828683018a612c77565b01928301527f3c646566733e3c706174682069643d22732d63757276652220643d224d32393061042a8301527f2c323020413234302c323430203020302c31203239302c34383022202066696c61044a8301527f6c3d226e6f6e6522207374726f6b653d226e6f6e6522202f3e3c2f646566733e61046a8301527f3c7465787420666f6e742d73697a653d223238222066696c6c3d22000000000061048a8301525190610f48826104a59687840190612c77565b01928301527f3c746578745061746820687265663d2223732d6375727665222073746172744f6104a78301526c333339b2ba1e9119981291101f60991b6104c78301526b455448206973206d6f6e657960a01b6104d48301526a1e17ba32bc3a2830ba341f60a91b93846104e0840152661e17ba32bc3a1f60c91b95866104eb8501526104f28401527f3c706174682069643d22732d63757276652d726576657273652220643d224d356104f88401527f302c33353020413234302c323430203020302c31203330302c333322202066696105188401527f6c6c3d226e6f6e6522207374726f6b653d226e6f6e6522202f3e0000000000006105388401526105528301527f3c7465787420666f6e742d73697a653d223234222066696c6c3d2200000000006105598301525190611086826105749788840190612c77565b01938401527f3c746578745061746820687265663d2223732d63757276652d7265766572736561057684015273111039ba30b93a27b33339b2ba1e91189812911f60611b6105968401527f457468657265756d2069732074686520776f726c6420636f6d707574657200006105aa8401526105c88301526105d3820152631e17b39f60e11b6105da820152651e17b9bb339f60d11b6105de820152036105c4810184520182612dd6565b6139c0565b918190847a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083818110156113ac575b5050866d04ee2d6d415b85acef8100000000808610156113a0575b5050662386f26fc1000080851015611393575b506305f5e10080851015611386575b5061271080851015611379575b50606484101561136b575b60219082600a80961015611364575b939291906111d283820161398e565b9750870101905b61132e575b866112c886611130609e8a6040519384917f7b226e616d65223a2022457468657265756d204e6f727468205374617220230088840152611227815180928a603f87019101612c77565b82017f222c20226465736372697074696f6e223a2022416e206f6e636861696e204574603f8201527f68657265756d204e6f7274682053746172204e46542e222c2022696d61676522605f8201527f3a2022646174613a696d6167652f7376672b786d6c3b6261736536342c000000607f8201526112ae825180938a609c85019101612c77565b0161227d60f01b609c82015203607e810184520182612dd6565b9061131a603d60405180947f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008583015261130a81518092878686019101612c77565b810103601d810185520183612dd6565b61029f604051928284938452830190612c9a565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561135f579190826111d9565b6111de565b01826111c3565b6064909304926002016111b4565b60049194049301386111a9565b600891940493013861119c565b601091940493013861118d565b9094049301863861117a565b04935060409050388061115f565b50346102a75760803660031901126102a7576113d4612cbf565b6113dc612cd5565b90606435906044356001600160401b0383116114435736602384011215611443576114409361141861143b943690602481600401359101612e12565b9261142b6114268433613438565b61335f565b6114368383836134ed565b6138c0565b613414565b80f35b8480fd5b50346102a75760203660031901126102a757611461612cbf565b61146961325a565b6001600160a01b03908181169081151580823b1581611550575b5061153e577fcc5dc080ff977b3c3a211fa63ab74f90f658f5ba9d3236e92c8f59570f442aac604086956114b561321c565b90825191168152856020820152a16008805460ff60a01b1916600160a01b179055600980546001600160a01b031916841790556114f0575050f35b3b6114f9575b50f35b803b1561153b5781809160446040518094819363fb2de5d760e01b83523060048401526102d160248401525af1156114f65761153490612d72565b6102a75780f35b50fd5b6040516332483afb60e01b8152600490fd5b905038611483565b50346102a75760403660031901126102a757611572612cbf565b6024359081151580920361162a576001600160a01b0316903382146115e55733835260056020526040832082600052602052604060002060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b600080fd5b50346102a75760203660031901126102a7576020906004358152600f8252604060018060a01b0391205416604051908152f35b50346102a75760203660031901126102a75760043580151580910361162a5760207f6787c7f9a80aa0f5ceddab2c54f1f5169c0b88e75dd5e19d5e858a64144c7dbc916116ad61325a565b6009805460ff60a01b191660a083901b60ff60a01b16179055604051908152a180f35b50346102a757806003193601126102a75760405160006007546116f28161313c565b8084529060019081811690811561178b5750600114611730575b61029f8461171c81860382612dd6565b604051918291602083526020830190612c9a565b6007600090815292507fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6885b82841061177357505050810160200161171c8261170c565b8054602085870181019190915290930192810161175b565b60ff191660208087019190915292151560051b8501909201925061171c915083905061170c565b50346102a757806003193601126102a75760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346102a757806003193601126102a7576008546040516001600160a01b039091168152602090f35b50346102a75760403660031901126102a7576004356001600160401b0381116102a357611847903690600401612e49565b906024356001600160401b0381116102a357611867903690600401612e49565b601254611d4c8110156120c3573383526013602052600a604084205410156120855760405160208101906118c660208288516118a68187858d01612c77565b81018751906118ba82858301868c01612c77565b01038084520182612dd6565b51902091828452601560205260ff60408520541661204157604051602081018181106001600160401b0382111761202b57604052848152331561201957828552600f60205260408520546001600160a01b03908116612007576e5af43d82803e903d91602b57fd5bf37f0000000000000000000000000000000000000000000000000000000000000000763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c1617885260781b17602052806037600988f016908115611fc9577f000000000000000000000000000000000000000000000000000000000000000016338103611ed457604051906119c082612d85565b60018252602036818401376119d482613b06565b52604051906119e282612d85565b6001825260203681840137611a377f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006136c1565b611a4083613b06565b52823b15611ed057604051633713060f60e11b815291889183918291611a6a919060048401613b39565b038183865af18015611ec557908791611ead575b50505b838652601060205260408620906001600160601b0360a01b91818382541617905533875260116020526040872080549068010000000000000000821015611e995760018201808255821015611e85579161143b9391611bb395938a5260208a20019082825416179055858852600f602052604088203382825416179055611b26611b2087600052600260205260018060a01b0360406000205416151590565b15613b86565b611b3086336136ce565b600086815260026020526040902054611b53906001600160a01b03161515611b20565b338852600360205260408820600181540190558588526002602052604088209033908254161790558433887fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4611bac85336136ce565b84336137a4565b60405194611bc086612d85565b85526020850152825260146020526040822083518051906001600160401b038211611e7157611bef835461313c565b601f8111611e2c575b50602090601f8311600114611dc3579180602094926001948892611db8575b5050600019600383901b1c191690831b1781555b019301519283516001600160401b038111611da457611c4a825461313c565b601f8111611d5f575b50602094601f8211600114611cfc579484958293949592611cf1575b50508160011b916000199060031b1c19161790555b8152601560205260408120600160ff1982541617905560125460018101809111611cdd5760125533815260136020526040812080549060018201809211611cc9575580f35b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b82526011600452602482fd5b015190503880611c6f565b601f198216958386526020862091865b888110611d4757508360019596979810611d2e575b505050811b019055611c84565b015160001960f88460031b161c19169055388080611d21565b91926020600181928685015181550194019201611d0c565b82855260208520601f830160051c81019160208410611d9a575b601f0160051c01905b818110611d8f5750611c53565b858155600101611d82565b9091508190611d79565b634e487b7160e01b84526041600452602484fd5b015190503880611c17565b838652602086209190601f198416875b818110611e1457509260019491928593836020989610611dfb575b505050811b018155611c2b565b015160001960f88460031b161c19169055388080611dee565b92936020600181928786015181550195019301611dd3565b83865260208620601f840160051c81019160208510611e67575b601f0160051c01905b818110611e5c5750611bf8565b868155600101611e4f565b9091508190611e46565b634e487b7160e01b85526041600452602485fd5b634e487b7160e01b89526032600452602489fd5b634e487b7160e01b89526041600452602489fd5b611eb690612d72565b611ec1578538611a7e565b8580fd5b6040513d89823e3d90fd5b8780fd5b60405190611ee182612dbb565b60028252604036602084013733611ef783613b06565b52611f0182613b29565b5260405190611f0f82612dbb565b6002825260403660208401377f0000000000000000000000000000000000000000000000000000000000000000611f4583613b06565b527f0000000000000000000000000000000000000000000000000000000000000000611f7083613b29565b52823b15611ed057604051633713060f60e11b815291889183918291611f9a919060048401613b39565b038183865af18015611ec557908791611fb5575b5050611a81565b611fbe90612d72565b611ec1578538611fae565b60405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606490fd5b604051630cb756a360e41b8152600490fd5b60405163022432f960e01b8152600490fd5b634e487b7160e01b600052604160045260246000fd5b606460405162461bcd60e51b815260206004820152602060248201527f436f6c6f7220636f6d62696e6174696f6e20616c7265616479206578697374736044820152fd5b60405162461bcd60e51b815260206004820152601660248201527513585e080c4c081391951cc81c195c881dd85b1b195d60521b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b6044820152606490fd5b50346102a757806003193601126102a7576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102a757806003193601126102a75760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346102a757602061219761219136612d53565b90612efe565b604051908152f35b50346102a75760203660031901126102a7576020906040906001600160a01b036121c7612cbf565b168152601383522054604051908152f35b50346102a757806003193601126102a7576121f161325a565b600880546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346102a75760203660031901126102a7576001600160a01b03612258612cbf565b168015612275578160409160209352600383522054604051908152f35b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b50346102a75760203660031901126102a757602090600435815260108252604060018060a01b0391205416604051908152f35b50346102a75760203660031901126102a757602061231e6004356132fe565b6040516001600160a01b039091168152f35b50346102a757806003193601126102a757602060ff60095460a01c166040519015158152f35b50346102a757602090816003193601126102a757600435612376816132fe565b6001600160a01b0390811615919060005b600190818110156123c85761239c81856136c1565b5084806123c1575b156123bb57604051635cbd944160e01b8152600490fd5b01612387565b50816123a4565b5050939291506123d7816132fe565b938183526004845260408320946001600160601b0360a01b9586815416905516918281526003845260408120600019815401905581815260028452604081208581541690558181847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a460009215925b6001908181101561248a5761245e81856136c1565b508480612483575b1561247d57604051635cbd944160e01b8152600490fd5b01612449565b5081612466565b82601587898784526010825260408420818154169055600f82526040842090815416905560148152604083206124d96001604051926124c884612d85565b6124d181613176565b845201613176565b9081838201525190612512836040518093826124fe8184019788815193849201612c77565b82016118ba82518093868085019101612c77565b51902083525260408120805460ff1916905580f35b50346102a75761144061143b61253c36612ceb565b906040519261254a84612da0565b86845261142b6114268433613438565b50346102a757806003193601126102a75760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346102a75760206121976125a936612d20565b91613036565b50346102a7576125be36612d53565b91906125c981613109565b60028410156126a75782931560001461264357908252600f60205260408220546001600160a01b039182169116813b1561263f578291602483926040519485938492631916558760e01b845260048401525af180156126345761262b57505080f35b61153490612d72565b6040513d84823e3d90fd5b5050fd5b6001600160a01b039081169150813b1561263f578291602483926040519485938492631916558760e01b84527f00000000000000000000000000000000000000000000000000000000000000001660048401525af180156126345761262b57505080f35b634e487b7160e01b83526021600452602483fd5b50346102a757806003193601126102a7576020604051611d4c8152f35b50346102a75760403660031901126102a7576004358152601060205260409020547f0000000000000000000000000000000000000000000000000000000000000000602435818102926001600160a01b031691811591840414171561274a576127106040928351928352046020820152f35b634e487b7160e01b600052601160045260246000fd5b50346102a75761276f36612d20565b92919061277b82613109565b916002851015612876578394156000146127f4578352600f60205260408320546001600160a01b0392908316908316803b156114435760405163122dd41160e21b8152939092166001600160a01b03908116600485015216602483015282908290604490829084905af180156126345761262b57505080f35b506001600160a01b0392918316803b156128725760405163122dd41160e21b8152939091166001600160a01b0390811660048501527f00000000000000000000000000000000000000000000000000000000000000001660248401528290604490829084905af1801561263457612869575080f35b61144090612d72565b8280fd5b634e487b7160e01b84526021600452602484fd5b50346102a75761144061289c36612ceb565b916128aa6114268433613438565b6134ed565b50346102a757806003193601126102a7576040805163657711f560e11b815260016020820152f35b50346102a757806003193601126102a757602061231e61321c565b50346102a75760403660031901126102a75761290c612cbf565b60243590612919826132fe565b6001600160a01b039182169190808216838114612a0a5733149081156129f8575b501561298d5782845260046020526040842080546001600160a01b03191683179055612965836132fe565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b612a0491503390612ea4565b3861293a565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b50346102a75760203660031901126102a757602061231e600435613321565b50346102a757806003193601126102a7576040519080600654612a9a8161313c565b80855291600191808316908115612b1f5750600114612ac4575b61029f8561171c81870382612dd6565b9250600683527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b828410612b0757505050810160200161171c8261029f612ab4565b80546020858701810191909152909301928101612aec565b86955061029f9693506020925061171c94915060ff191682840152151560051b8201019293612ab4565b50346102a757806003193601126102a7576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102a75760203660031901126102a75760043563ffffffff60e01b81168091036102a35760209063152a902d60e11b8114908115612bd4575b506040519015158152f35b632b435fdb60e21b811491508115612c38575b8115612bf5575b5082612bc9565b6380ac58cd60e01b811491508115612c27575b8115612c16575b5082612bee565b6301ffc9a760e01b14905082612c0f565b635b5e139f60e01b81149150612c08565b63503e914d60e11b81149150612be7565b9050346102a357816003193601126102a3578073721c002b0059009a671d00ad1700c9748146cd1b60209252f35b60005b838110612c8a5750506000910152565b8181015183820152602001612c7a565b90602091612cb381518092818552858086019101612c77565b601f01601f1916010190565b600435906001600160a01b038216820361162a57565b602435906001600160a01b038216820361162a57565b606090600319011261162a576001600160a01b0390600435828116810361162a5791602435908116810361162a579060443590565b606090600319011261162a57600435906024356001600160a01b038116810361162a5790604435600281101561162a5790565b604090600319011261162a5760043590602435600281101561162a5790565b6001600160401b03811161202b57604052565b604081019081106001600160401b0382111761202b57604052565b602081019081106001600160401b0382111761202b57604052565b606081019081106001600160401b0382111761202b57604052565b90601f801991011681019081106001600160401b0382111761202b57604052565b6001600160401b03811161202b57601f01601f191660200190565b929192612e1e82612df7565b91612e2c6040519384612dd6565b82948184528183011161162a578281602093846000960137010152565b9080601f8301121561162a57816020612e6493359101612e12565b90565b90815180825260208080930193019160005b828110612e87575050505090565b83516001600160a01b031685529381019392810192600101612e79565b919060018060a01b0380931660005260056020528260406000209116908160005260205260ff60406000205416928315612edc575050565b60ff60095460a01c16612eed575050565b90919250612ef961321c565b161490565b90612f0882613109565b90600281101561302057612f9d576000918252600f602090815260408084205490516351fc756760e11b81526001600160a01b0391821660048201529283916024918391165afa918215612f91578092612f6157505090565b9091506020823d8211612f89575b81612f7c60209383612dd6565b810103126102a757505190565b3d9150612f6f565b604051903d90823e3d90fd5b6040516351fc756760e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015290925060209183916024918391165afa90811561301457600091612ffc575090565b906020823d8211612f895781612f7c60209383612dd6565b6040513d6000823e3d90fd5b634e487b7160e01b600052602160045260246000fd5b9161304083613109565b906002811015613020576130a3576000928352600f60209081526040808520549051630c45ac0560e41b81526001600160a01b039485166004820152908416602482015292909183916044918391165afa918215612f91578092612f6157505090565b604051630c45ac0560e41b81526001600160a01b0392831660048201527f000000000000000000000000000000000000000000000000000000000000000083166024820152925060209183916044918391165afa90811561301457600091612ffc575090565b6000908152601060205260409020546001600160a01b0316801561312a5790565b604051630867de0160e21b8152600490fd5b90600182811c9216801561316c575b602083101461315657565b634e487b7160e01b600052602260045260246000fd5b91607f169161314b565b906040519182600082549261318a8461313c565b9081845260019485811690816000146131f957506001146131b6575b50506131b492500383612dd6565b565b9093915060005260209081600020936000915b8183106131e15750506131b4935082010138806131a6565b855488840185015294850194879450918301916131c9565b9150506131b494506020925060ff191682840152151560051b82010138806131a6565b6009546001600160a01b031690811561323157565b60ff60085460a01c161561324157565b73721c002b0059009a671d00ad1700c9748146cd1b9150565b6008546001600160a01b0316330361326e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156132b957565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b0316612e648115156132b2565b600081815260026020526040902054613344906001600160a01b031615156132b2565b6000908152600460205260409020546001600160a01b031690565b1561336657565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b1561341b57565b60405162461bcd60e51b815280613434600482016133c1565b0390fd5b613441826132fe565b9160018060a01b0390818316928285168414948515613480575b5050831561346a575b50505090565b61347691929350613321565b1614388080613464565b61348b929550612ea4565b92388061345b565b1561349a57565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b909161351493926134fd826132fe565b6001600160a01b0395848716939187168414613493565b8582169485156136705792948515939060005b600190818110156135825761353c81866136c1565b878061357a575b1561355a57604051635cbd944160e01b8152600490fd5b8715613568575b5001613527565b61357490878a33613713565b38613561565b506000613543565b50509450956135a19192509480939561359a846132fe565b1614613493565b80600052600493846020528160409485600020946001600160601b0360a01b958681541690558060005260036020528660002060001981540190558160005286600020956001968781540190558360005260026020528288600020918254161790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a460005b83811061363a57505050505050565b61364481846136c1565b508180613668575b15613661578451635cbd944160e01b81528690fd5b830161362b565b50600061364c565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9190820180921161274a57565b60005b6001908181101561370d576136e681856136c1565b506001600160a01b03831661370757604051635cbd944160e01b8152600490fd5b016136d1565b50505050565b9092916001600160a01b03918261372861321c565b1680613737575b505050505050565b80331461372f57803b1561162a576000948460849481604051998a98899763657711f560e11b895216600488015216602486015216604484015260648301525afa80156130145761378d575b808080808061372f565b6001600160401b03811161202b5760405238613783565b9192600092909190803b156138b6576137f2946040518092630a85bd0160e11b9485835233600484015287602484015260448301526080606483015281878160209a8b966084830190612c9a565b03926001600160a01b03165af1849181613876575b50613865575050503d60001461385d573d61382181612df7565b9061382f6040519283612dd6565b81528091833d92013e5b8051918261385a5760405162461bcd60e51b815280613434600482016133c1565b01fd5b506060613839565b6001600160e01b0319161492509050565b9091508581813d83116138af575b61388e8183612dd6565b8101031261144357516001600160e01b031981168103611443579038613807565b503d613884565b5050915050600190565b9293600093909291803b156139405794849161391a9660405180948193630a85bd0160e11b9788845233600485015260018060a01b0380921660248501526044840152608060648401528260209b8c976084830190612c9a565b0393165af18491816138765750613865575050503d60001461385d573d61382181612df7565b505050915050600190565b1561395257565b60405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b9061399882612df7565b6139a56040519182612dd6565b82815280926139b6601f1991612df7565b0190602036910137565b805115613af2576040516139d381612dbb565b604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040820152815160029283820180921161274a576003918290046001600160fe1b038116810361274a57613a55908594951b61398e565b936020850193829183518401925b838110613aa15750505050510680600114613a8e57600214613a83575090565b603d90600019015390565b50603d9081600019820153600119015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c1688010151888501531685010151878201530195929190613a63565b50604051613aff81612da0565b6000815290565b805115613b135760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015613b135760400190565b90613b4c90604083526040830190612e67565b81810360209283015282518082529082019282019160005b828110613b72575050505090565b835185529381019392810192600101613b64565b15613b8d57565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fdfea26469706673582212203c6034f035cd9499b2c074d1fb4890582b822c57c4d101cb97d3e844c32589f864736f6c63430008110033a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081630146354614612c495750806301ffc9a714612b8e57806302d05d3f14612b4957806306fdde0314612a78578063081812fc14612a59578063095ea7b3146128f2578063098144d4146128d75780630d705df6146128af57806323b872dd1461288a578063261a2f30146127605780632a55205a146126d857806332cb6b0c146126bb57806333c93f58146125af57806336d396f4146125955780633bdec33e1461255a57806342842e0e1461252757806342966c68146123565780636221d13c146123305780636352211e146122ff5780636b6b3c63146122cc57806370a0823114612236578063715018a6146121d85780637241dfa01461219f57806377f33fe91461217d57806381ddcc1f1461214257806386c24508146120fd5780638aa0fdad146118165780638da5cb5b146117ed578063939a6c1c146117b257806395d89b41146116d05780639e05d240146116625780639e942ace1461162f578063a22cb46514611558578063a9fc664e14611447578063b88d4fde146113ba578063c87b56dd14610471578063d082e38114610453578063d73792a914610436578063e985e9c5146103ff578063ee62ad6314610370578063f2fde38b146102aa5763f3119682146101ef57600080fd5b346102a7576020806003193601126102a35761029f60408093600435606085845161021981612d85565b8281520152600081815260026020526040902054610241906001600160a01b0316151561394b565b815260148452209161028c61026e600186519561025d87612d85565b61026681613176565b875201613176565b91808501928352855195869582875251918601526060850190612c9a565b9051838203601f19016040850152612c9a565b0390f35b5080fd5b80fd5b50346102a75760203660031901126102a7576102c4612cbf565b6102cc61325a565b6001600160a01b0390811690811561031c57600854826001600160601b0360a01b821617600855167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346102a7576020806003193601126102a3576001600160a01b039182610395612cbf565b16815260118252604081209260405193848592858354928381520192855285852094905b868383106103e35785906103cf82870383612dd6565b61029f604051928284938452830190612e67565b86548216855260019687019689965094019391909101906103b9565b50346102a75760403660031901126102a757602061042c61041e612cbf565b610426612cd5565b90612ea4565b6040519015158152f35b50346102a757806003193601126102a75760206040516127108152f35b50346102a757806003193601126102a7576020601254604051908152f35b50346102a757602090816003193601126102a7576004356000818152600260205260409020546104ab906001600160a01b0316151561394b565b8082526014835260408220906111356040516104c681612d85565b6104cf84613176565b81526111306105e46104e46001809701613176565b92838982015251926040519384917f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f32308b8401527f30302f737667222077696474683d2236303022206865696768743d22363030226040840152601f60f91b60608401527f3c726563742077696474683d2236303022206865696768743d2236303022206660618401526434b6361e9160d91b60818401528051918b820192610590816086870186612c77565b631110179f60e11b60869186019182018190527f3c67207472616e73666f726d3d227472616e736c6174652835302c353029223e608a8301527f3c646566733e3c636c6970506174682069643d226c65667468616c66223e3c7260aa8301527f65637420783d22302220793d2230222077696474683d2232353022206865696760ca8301527f68743d22353030222f3e3c2f636c6970506174683e3c2f646566733e0000000060ea8301527f3c636972636c652063783d22323530222063793d223235302220723d223235306101068301526711103334b6361e9160c11b610126830152919061012e018151828f019161068b828285612c77565b01937f2220636c69702d706174683d2275726c28236c65667468616c6629222f3e00008552651e3232b3399f60d11b9485601e8201527f3c66696c7465722069643d2266312220783d222d3130252220793d222d31302560248201528661111f60f11b9482866044819501527f3c6665476175737369616e426c757220696e3d22536f7572636547726170686960468201527531911039ba322232bb34b0ba34b7b71e91189811179f60511b6066820152681e17b334b63a32b91f60b91b607c820152661e17b232b3399f60c91b978860858301527f3c636972636c652063783d22323532222063793d223235302220723d22323530608c830152866108806101296711103334b6361e9160c11b948560ac8201528651906107b18260b4830187612c77565b01751110103334b63a32b91e913ab9361411b3189491179f60511b60b48201527f3c646566733e3c636c6970506174682069643d22726967687468616c66223e3c60ca8201527f7265637420783d223235302220793d2230222077696474683d2232353022206860ea8201527f65696768743d22353030222f3e3c2f636c6970506174683e3c2f646566733e0061010a820152016028907f3c636972636c652063783d22323530222063793d223235302220723d2232353081526711103334b6361e9160c11b60208201520190565b87519061088e828289612c77565b017f2220636c69702d706174683d2275726c2823726967687468616c6629222f3e0081527f3c636972636c652063783d22323530222063793d223132352220723d22313235601f82015283603f8201528451906108ef826047830185612c77565b016211179f60e91b938460478301527f3c636972636c652063783d22323530222063793d223337352220723d22313235604a830152606a82015287519061093a826072830189612c77565b018260728201527f3c636972636c652063783d22323530222063793d223132352220723d22333522607682015266103334b6361e9160c91b9081609682015288519061098a82609d83018a612c77565b0184609d8201527f3c7265637420783d223233352220793d22313039222077696474683d2233302260a0820152837f206865696768743d223322207a3d223130222066696c6c3d2200000000000000918260c08201528751906109f18260d9830188612c77565b018160d98201527f3c7265637420783d223233372220793d22313234222077696474683d2232362260dd8201528260fd820152875190610a38826101169788840190612c77565b01938401527f3c7265637420783d223233352220793d22313339222077696474683d2233302261011a84015261013a83015282855161015393610a7f828d87840190612c77565b01928301527f3c636972636c652063783d22323530222063793d223337352220723d2233352261015783015261017782015281845161017e92610ac5828583018d612c77565b01918201527f3c7265637420783d223233352220793d22333630222077696474683d2233302261018282015272103432b4b3b43a1e91199811103334b6361e9160691b6101a28201528187516101b592610b22828583018a612c77565b01918201527f3c7265637420783d223233302220793d22333636222077696474683d223430226101b982015271103432b4b3b43a1e911911103334b6361e9160711b806101d98301528288516101eb93610b7f828683018b612c77565b01928301527f3c7265637420783d223233302220793d22333730222077696474683d223430226101ef8301528061020f83015282885161022193610bc6828683018b612c77565b01928301527f3c7265637420783d223233302220793d22333734222077696474683d223430226102258301528061024583015282885161025793610c0d828683018b612c77565b01928301527f3c7265637420783d223233302220793d22333738222077696474683d2234302261025b8301528061027b83015282885161028d93610c54828683018b612c77565b01928301527f3c7265637420783d223233302220793d22333832222077696474683d223430226102918301526102b18201528187516102c392610c9a828583018a612c77565b01918201527f3c7265637420783d223234392220793d22333535222077696474683d223222206102c7820152713432b4b3b43a1e911a1811103334b6361e9160711b806102e78301528288516102f993610cf7828683018b612c77565b01928301527f3c7265637420783d223235332220793d22333535222077696474683d223222206102fd8301528061031d83015282885161032f93610d3e828683018b612c77565b01928301527f3c7265637420783d223235372220793d22333535222077696474683d223222206103338301528061035383015282885161036593610d85828683018b612c77565b01928301527f3c7265637420783d223234352220793d22333535222077696474683d223222206103698301528061038983015282885161039b93610dcc828683018b612c77565b01928301527f3c7265637420783d223234312220793d22333535222077696474683d2232222061039f8301526103bf820152865190610e12826103d19788840190612c77565b01938401527f3c7265637420783d223234312220793d22333636222077696474683d223138226103d58401527f206865696768743d223138222066696c6c3d226e6f6e6522207374726f6b652d6103f5840152713bb4b23a341e9119111039ba3937b5b29e9160711b610415840152815161042793610e94828683018a612c77565b01928301527f3c646566733e3c706174682069643d22732d63757276652220643d224d32393061042a8301527f2c323020413234302c323430203020302c31203239302c34383022202066696c61044a8301527f6c3d226e6f6e6522207374726f6b653d226e6f6e6522202f3e3c2f646566733e61046a8301527f3c7465787420666f6e742d73697a653d223238222066696c6c3d22000000000061048a8301525190610f48826104a59687840190612c77565b01928301527f3c746578745061746820687265663d2223732d6375727665222073746172744f6104a78301526c333339b2ba1e9119981291101f60991b6104c78301526b455448206973206d6f6e657960a01b6104d48301526a1e17ba32bc3a2830ba341f60a91b93846104e0840152661e17ba32bc3a1f60c91b95866104eb8501526104f28401527f3c706174682069643d22732d63757276652d726576657273652220643d224d356104f88401527f302c33353020413234302c323430203020302c31203330302c333322202066696105188401527f6c6c3d226e6f6e6522207374726f6b653d226e6f6e6522202f3e0000000000006105388401526105528301527f3c7465787420666f6e742d73697a653d223234222066696c6c3d2200000000006105598301525190611086826105749788840190612c77565b01938401527f3c746578745061746820687265663d2223732d63757276652d7265766572736561057684015273111039ba30b93a27b33339b2ba1e91189812911f60611b6105968401527f457468657265756d2069732074686520776f726c6420636f6d707574657200006105aa8401526105c88301526105d3820152631e17b39f60e11b6105da820152651e17b9bb339f60d11b6105de820152036105c4810184520182612dd6565b6139c0565b918190847a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083818110156113ac575b5050866d04ee2d6d415b85acef8100000000808610156113a0575b5050662386f26fc1000080851015611393575b506305f5e10080851015611386575b5061271080851015611379575b50606484101561136b575b60219082600a80961015611364575b939291906111d283820161398e565b9750870101905b61132e575b866112c886611130609e8a6040519384917f7b226e616d65223a2022457468657265756d204e6f727468205374617220230088840152611227815180928a603f87019101612c77565b82017f222c20226465736372697074696f6e223a2022416e206f6e636861696e204574603f8201527f68657265756d204e6f7274682053746172204e46542e222c2022696d61676522605f8201527f3a2022646174613a696d6167652f7376672b786d6c3b6261736536342c000000607f8201526112ae825180938a609c85019101612c77565b0161227d60f01b609c82015203607e810184520182612dd6565b9061131a603d60405180947f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008583015261130a81518092878686019101612c77565b810103601d810185520183612dd6565b61029f604051928284938452830190612c9a565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821561135f579190826111d9565b6111de565b01826111c3565b6064909304926002016111b4565b60049194049301386111a9565b600891940493013861119c565b601091940493013861118d565b9094049301863861117a565b04935060409050388061115f565b50346102a75760803660031901126102a7576113d4612cbf565b6113dc612cd5565b90606435906044356001600160401b0383116114435736602384011215611443576114409361141861143b943690602481600401359101612e12565b9261142b6114268433613438565b61335f565b6114368383836134ed565b6138c0565b613414565b80f35b8480fd5b50346102a75760203660031901126102a757611461612cbf565b61146961325a565b6001600160a01b03908181169081151580823b1581611550575b5061153e577fcc5dc080ff977b3c3a211fa63ab74f90f658f5ba9d3236e92c8f59570f442aac604086956114b561321c565b90825191168152856020820152a16008805460ff60a01b1916600160a01b179055600980546001600160a01b031916841790556114f0575050f35b3b6114f9575b50f35b803b1561153b5781809160446040518094819363fb2de5d760e01b83523060048401526102d160248401525af1156114f65761153490612d72565b6102a75780f35b50fd5b6040516332483afb60e01b8152600490fd5b905038611483565b50346102a75760403660031901126102a757611572612cbf565b6024359081151580920361162a576001600160a01b0316903382146115e55733835260056020526040832082600052602052604060002060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b600080fd5b50346102a75760203660031901126102a7576020906004358152600f8252604060018060a01b0391205416604051908152f35b50346102a75760203660031901126102a75760043580151580910361162a5760207f6787c7f9a80aa0f5ceddab2c54f1f5169c0b88e75dd5e19d5e858a64144c7dbc916116ad61325a565b6009805460ff60a01b191660a083901b60ff60a01b16179055604051908152a180f35b50346102a757806003193601126102a75760405160006007546116f28161313c565b8084529060019081811690811561178b5750600114611730575b61029f8461171c81860382612dd6565b604051918291602083526020830190612c9a565b6007600090815292507fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6885b82841061177357505050810160200161171c8261170c565b8054602085870181019190915290930192810161175b565b60ff191660208087019190915292151560051b8501909201925061171c915083905061170c565b50346102a757806003193601126102a75760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346102a757806003193601126102a7576008546040516001600160a01b039091168152602090f35b50346102a75760403660031901126102a7576004356001600160401b0381116102a357611847903690600401612e49565b906024356001600160401b0381116102a357611867903690600401612e49565b601254611d4c8110156120c3573383526013602052600a604084205410156120855760405160208101906118c660208288516118a68187858d01612c77565b81018751906118ba82858301868c01612c77565b01038084520182612dd6565b51902091828452601560205260ff60408520541661204157604051602081018181106001600160401b0382111761202b57604052848152331561201957828552600f60205260408520546001600160a01b03908116612007576e5af43d82803e903d91602b57fd5bf37f0000000000000000000000000000000000000000000000000000000000000000763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c1617885260781b17602052806037600988f016908115611fc9577f000000000000000000000000000000000000000000000000000000000000000016338103611ed457604051906119c082612d85565b60018252602036818401376119d482613b06565b52604051906119e282612d85565b6001825260203681840137611a377f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006136c1565b611a4083613b06565b52823b15611ed057604051633713060f60e11b815291889183918291611a6a919060048401613b39565b038183865af18015611ec557908791611ead575b50505b838652601060205260408620906001600160601b0360a01b91818382541617905533875260116020526040872080549068010000000000000000821015611e995760018201808255821015611e85579161143b9391611bb395938a5260208a20019082825416179055858852600f602052604088203382825416179055611b26611b2087600052600260205260018060a01b0360406000205416151590565b15613b86565b611b3086336136ce565b600086815260026020526040902054611b53906001600160a01b03161515611b20565b338852600360205260408820600181540190558588526002602052604088209033908254161790558433887fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4611bac85336136ce565b84336137a4565b60405194611bc086612d85565b85526020850152825260146020526040822083518051906001600160401b038211611e7157611bef835461313c565b601f8111611e2c575b50602090601f8311600114611dc3579180602094926001948892611db8575b5050600019600383901b1c191690831b1781555b019301519283516001600160401b038111611da457611c4a825461313c565b601f8111611d5f575b50602094601f8211600114611cfc579484958293949592611cf1575b50508160011b916000199060031b1c19161790555b8152601560205260408120600160ff1982541617905560125460018101809111611cdd5760125533815260136020526040812080549060018201809211611cc9575580f35b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b82526011600452602482fd5b015190503880611c6f565b601f198216958386526020862091865b888110611d4757508360019596979810611d2e575b505050811b019055611c84565b015160001960f88460031b161c19169055388080611d21565b91926020600181928685015181550194019201611d0c565b82855260208520601f830160051c81019160208410611d9a575b601f0160051c01905b818110611d8f5750611c53565b858155600101611d82565b9091508190611d79565b634e487b7160e01b84526041600452602484fd5b015190503880611c17565b838652602086209190601f198416875b818110611e1457509260019491928593836020989610611dfb575b505050811b018155611c2b565b015160001960f88460031b161c19169055388080611dee565b92936020600181928786015181550195019301611dd3565b83865260208620601f840160051c81019160208510611e67575b601f0160051c01905b818110611e5c5750611bf8565b868155600101611e4f565b9091508190611e46565b634e487b7160e01b85526041600452602485fd5b634e487b7160e01b89526032600452602489fd5b634e487b7160e01b89526041600452602489fd5b611eb690612d72565b611ec1578538611a7e565b8580fd5b6040513d89823e3d90fd5b8780fd5b60405190611ee182612dbb565b60028252604036602084013733611ef783613b06565b52611f0182613b29565b5260405190611f0f82612dbb565b6002825260403660208401377f0000000000000000000000000000000000000000000000000000000000000000611f4583613b06565b527f0000000000000000000000000000000000000000000000000000000000000000611f7083613b29565b52823b15611ed057604051633713060f60e11b815291889183918291611f9a919060048401613b39565b038183865af18015611ec557908791611fb5575b5050611a81565b611fbe90612d72565b611ec1578538611fae565b60405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606490fd5b604051630cb756a360e41b8152600490fd5b60405163022432f960e01b8152600490fd5b634e487b7160e01b600052604160045260246000fd5b606460405162461bcd60e51b815260206004820152602060248201527f436f6c6f7220636f6d62696e6174696f6e20616c7265616479206578697374736044820152fd5b60405162461bcd60e51b815260206004820152601660248201527513585e080c4c081391951cc81c195c881dd85b1b195d60521b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527113585e081cdd5c1c1b1e481c995858da195960721b6044820152606490fd5b50346102a757806003193601126102a7576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102a757806003193601126102a75760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346102a757602061219761219136612d53565b90612efe565b604051908152f35b50346102a75760203660031901126102a7576020906040906001600160a01b036121c7612cbf565b168152601383522054604051908152f35b50346102a757806003193601126102a7576121f161325a565b600880546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346102a75760203660031901126102a7576001600160a01b03612258612cbf565b168015612275578160409160209352600383522054604051908152f35b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b50346102a75760203660031901126102a757602090600435815260108252604060018060a01b0391205416604051908152f35b50346102a75760203660031901126102a757602061231e6004356132fe565b6040516001600160a01b039091168152f35b50346102a757806003193601126102a757602060ff60095460a01c166040519015158152f35b50346102a757602090816003193601126102a757600435612376816132fe565b6001600160a01b0390811615919060005b600190818110156123c85761239c81856136c1565b5084806123c1575b156123bb57604051635cbd944160e01b8152600490fd5b01612387565b50816123a4565b5050939291506123d7816132fe565b938183526004845260408320946001600160601b0360a01b9586815416905516918281526003845260408120600019815401905581815260028452604081208581541690558181847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a460009215925b6001908181101561248a5761245e81856136c1565b508480612483575b1561247d57604051635cbd944160e01b8152600490fd5b01612449565b5081612466565b82601587898784526010825260408420818154169055600f82526040842090815416905560148152604083206124d96001604051926124c884612d85565b6124d181613176565b845201613176565b9081838201525190612512836040518093826124fe8184019788815193849201612c77565b82016118ba82518093868085019101612c77565b51902083525260408120805460ff1916905580f35b50346102a75761144061143b61253c36612ceb565b906040519261254a84612da0565b86845261142b6114268433613438565b50346102a757806003193601126102a75760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346102a75760206121976125a936612d20565b91613036565b50346102a7576125be36612d53565b91906125c981613109565b60028410156126a75782931560001461264357908252600f60205260408220546001600160a01b039182169116813b1561263f578291602483926040519485938492631916558760e01b845260048401525af180156126345761262b57505080f35b61153490612d72565b6040513d84823e3d90fd5b5050fd5b6001600160a01b039081169150813b1561263f578291602483926040519485938492631916558760e01b84527f00000000000000000000000000000000000000000000000000000000000000001660048401525af180156126345761262b57505080f35b634e487b7160e01b83526021600452602483fd5b50346102a757806003193601126102a7576020604051611d4c8152f35b50346102a75760403660031901126102a7576004358152601060205260409020547f0000000000000000000000000000000000000000000000000000000000000000602435818102926001600160a01b031691811591840414171561274a576127106040928351928352046020820152f35b634e487b7160e01b600052601160045260246000fd5b50346102a75761276f36612d20565b92919061277b82613109565b916002851015612876578394156000146127f4578352600f60205260408320546001600160a01b0392908316908316803b156114435760405163122dd41160e21b8152939092166001600160a01b03908116600485015216602483015282908290604490829084905af180156126345761262b57505080f35b506001600160a01b0392918316803b156128725760405163122dd41160e21b8152939091166001600160a01b0390811660048501527f00000000000000000000000000000000000000000000000000000000000000001660248401528290604490829084905af1801561263457612869575080f35b61144090612d72565b8280fd5b634e487b7160e01b84526021600452602484fd5b50346102a75761144061289c36612ceb565b916128aa6114268433613438565b6134ed565b50346102a757806003193601126102a7576040805163657711f560e11b815260016020820152f35b50346102a757806003193601126102a757602061231e61321c565b50346102a75760403660031901126102a75761290c612cbf565b60243590612919826132fe565b6001600160a01b039182169190808216838114612a0a5733149081156129f8575b501561298d5782845260046020526040842080546001600160a01b03191683179055612965836132fe565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b612a0491503390612ea4565b3861293a565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b50346102a75760203660031901126102a757602061231e600435613321565b50346102a757806003193601126102a7576040519080600654612a9a8161313c565b80855291600191808316908115612b1f5750600114612ac4575b61029f8561171c81870382612dd6565b9250600683527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b828410612b0757505050810160200161171c8261029f612ab4565b80546020858701810191909152909301928101612aec565b86955061029f9693506020925061171c94915060ff191682840152151560051b8201019293612ab4565b50346102a757806003193601126102a7576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102a75760203660031901126102a75760043563ffffffff60e01b81168091036102a35760209063152a902d60e11b8114908115612bd4575b506040519015158152f35b632b435fdb60e21b811491508115612c38575b8115612bf5575b5082612bc9565b6380ac58cd60e01b811491508115612c27575b8115612c16575b5082612bee565b6301ffc9a760e01b14905082612c0f565b635b5e139f60e01b81149150612c08565b63503e914d60e11b81149150612be7565b9050346102a357816003193601126102a3578073721c002b0059009a671d00ad1700c9748146cd1b60209252f35b60005b838110612c8a5750506000910152565b8181015183820152602001612c7a565b90602091612cb381518092818552858086019101612c77565b601f01601f1916010190565b600435906001600160a01b038216820361162a57565b602435906001600160a01b038216820361162a57565b606090600319011261162a576001600160a01b0390600435828116810361162a5791602435908116810361162a579060443590565b606090600319011261162a57600435906024356001600160a01b038116810361162a5790604435600281101561162a5790565b604090600319011261162a5760043590602435600281101561162a5790565b6001600160401b03811161202b57604052565b604081019081106001600160401b0382111761202b57604052565b602081019081106001600160401b0382111761202b57604052565b606081019081106001600160401b0382111761202b57604052565b90601f801991011681019081106001600160401b0382111761202b57604052565b6001600160401b03811161202b57601f01601f191660200190565b929192612e1e82612df7565b91612e2c6040519384612dd6565b82948184528183011161162a578281602093846000960137010152565b9080601f8301121561162a57816020612e6493359101612e12565b90565b90815180825260208080930193019160005b828110612e87575050505090565b83516001600160a01b031685529381019392810192600101612e79565b919060018060a01b0380931660005260056020528260406000209116908160005260205260ff60406000205416928315612edc575050565b60ff60095460a01c16612eed575050565b90919250612ef961321c565b161490565b90612f0882613109565b90600281101561302057612f9d576000918252600f602090815260408084205490516351fc756760e11b81526001600160a01b0391821660048201529283916024918391165afa918215612f91578092612f6157505090565b9091506020823d8211612f89575b81612f7c60209383612dd6565b810103126102a757505190565b3d9150612f6f565b604051903d90823e3d90fd5b6040516351fc756760e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015290925060209183916024918391165afa90811561301457600091612ffc575090565b906020823d8211612f895781612f7c60209383612dd6565b6040513d6000823e3d90fd5b634e487b7160e01b600052602160045260246000fd5b9161304083613109565b906002811015613020576130a3576000928352600f60209081526040808520549051630c45ac0560e41b81526001600160a01b039485166004820152908416602482015292909183916044918391165afa918215612f91578092612f6157505090565b604051630c45ac0560e41b81526001600160a01b0392831660048201527f000000000000000000000000000000000000000000000000000000000000000083166024820152925060209183916044918391165afa90811561301457600091612ffc575090565b6000908152601060205260409020546001600160a01b0316801561312a5790565b604051630867de0160e21b8152600490fd5b90600182811c9216801561316c575b602083101461315657565b634e487b7160e01b600052602260045260246000fd5b91607f169161314b565b906040519182600082549261318a8461313c565b9081845260019485811690816000146131f957506001146131b6575b50506131b492500383612dd6565b565b9093915060005260209081600020936000915b8183106131e15750506131b4935082010138806131a6565b855488840185015294850194879450918301916131c9565b9150506131b494506020925060ff191682840152151560051b82010138806131a6565b6009546001600160a01b031690811561323157565b60ff60085460a01c161561324157565b73721c002b0059009a671d00ad1700c9748146cd1b9150565b6008546001600160a01b0316330361326e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156132b957565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b0316612e648115156132b2565b600081815260026020526040902054613344906001600160a01b031615156132b2565b6000908152600460205260409020546001600160a01b031690565b1561336657565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b1561341b57565b60405162461bcd60e51b815280613434600482016133c1565b0390fd5b613441826132fe565b9160018060a01b0390818316928285168414948515613480575b5050831561346a575b50505090565b61347691929350613321565b1614388080613464565b61348b929550612ea4565b92388061345b565b1561349a57565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b909161351493926134fd826132fe565b6001600160a01b0395848716939187168414613493565b8582169485156136705792948515939060005b600190818110156135825761353c81866136c1565b878061357a575b1561355a57604051635cbd944160e01b8152600490fd5b8715613568575b5001613527565b61357490878a33613713565b38613561565b506000613543565b50509450956135a19192509480939561359a846132fe565b1614613493565b80600052600493846020528160409485600020946001600160601b0360a01b958681541690558060005260036020528660002060001981540190558160005286600020956001968781540190558360005260026020528288600020918254161790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a460005b83811061363a57505050505050565b61364481846136c1565b508180613668575b15613661578451635cbd944160e01b81528690fd5b830161362b565b50600061364c565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9190820180921161274a57565b60005b6001908181101561370d576136e681856136c1565b506001600160a01b03831661370757604051635cbd944160e01b8152600490fd5b016136d1565b50505050565b9092916001600160a01b03918261372861321c565b1680613737575b505050505050565b80331461372f57803b1561162a576000948460849481604051998a98899763657711f560e11b895216600488015216602486015216604484015260648301525afa80156130145761378d575b808080808061372f565b6001600160401b03811161202b5760405238613783565b9192600092909190803b156138b6576137f2946040518092630a85bd0160e11b9485835233600484015287602484015260448301526080606483015281878160209a8b966084830190612c9a565b03926001600160a01b03165af1849181613876575b50613865575050503d60001461385d573d61382181612df7565b9061382f6040519283612dd6565b81528091833d92013e5b8051918261385a5760405162461bcd60e51b815280613434600482016133c1565b01fd5b506060613839565b6001600160e01b0319161492509050565b9091508581813d83116138af575b61388e8183612dd6565b8101031261144357516001600160e01b031981168103611443579038613807565b503d613884565b5050915050600190565b9293600093909291803b156139405794849161391a9660405180948193630a85bd0160e11b9788845233600485015260018060a01b0380921660248501526044840152608060648401528260209b8c976084830190612c9a565b0393165af18491816138765750613865575050503d60001461385d573d61382181612df7565b505050915050600190565b1561395257565b60405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b9061399882612df7565b6139a56040519182612dd6565b82815280926139b6601f1991612df7565b0190602036910137565b805115613af2576040516139d381612dbb565b604081527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040820152815160029283820180921161274a576003918290046001600160fe1b038116810361274a57613a55908594951b61398e565b936020850193829183518401925b838110613aa15750505050510680600114613a8e57600214613a83575090565b603d90600019015390565b50603d9081600019820153600119015390565b85600491979293949701918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c1688010151888501531685010151878201530195929190613a63565b50604051613aff81612da0565b6000815290565b805115613b135760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015613b135760400190565b90613b4c90604083526040830190612e67565b81810360209283015282518082529082019282019160005b828110613b72575050505090565b835185529381019392810192600101613b64565b15613b8d57565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fdfea26469706673582212203c6034f035cd9499b2c074d1fb4890582b822c57c4d101cb97d3e844c32589f864736f6c63430008110033",
  "devdoc": {
    "errors": {
      "CreatorTokenBase__InvalidTransferValidatorContract()": [
        {
          "details": "Thrown when setting a transfer validator address that has no deployed code."
        }
      ],
      "ShouldNotMintToBurnAddress()": [
        {
          "details": "Thrown when the from and to address are both the zero address."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "minterOf(uint256)": {
        "params": {
          "tokenId": "The id of the token whose minter is being queried."
        },
        "returns": {
          "_0": "The minter of the token with id `tokenId`."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paymentSplitterOf(uint256)": {
        "params": {
          "tokenId": "The id of the token whose payment splitter is being queried."
        },
        "returns": {
          "_0": "The payment splitter of the token with id `tokenId`."
        }
      },
      "paymentSplittersOfMinter(address)": {
        "params": {
          "minter": "The minter whose payment splitters are being queried."
        },
        "returns": {
          "_0": "The payment splitters of the minter `minter`."
        }
      },
      "releasableERC20Funds(uint256,address,uint8)": {
        "params": {
          "coin": "The address of the ERC20 token whose releasable funds are being queried.",
          "releaseTo": "Specifies whether the minter or creator should be queried.",
          "tokenId": "The id of the token whose releasable funds are being queried."
        },
        "returns": {
          "_0": "The amount of ERC20 funds that can be released to the minter or creator of the token with id `tokenId`."
        }
      },
      "releasableNativeFunds(uint256,uint8)": {
        "params": {
          "releaseTo": "Specifies whether the minter or creator should be queried.",
          "tokenId": "The id of the token whose releasable funds are being queried."
        },
        "returns": {
          "_0": "The amount of native funds that can be released to the minter or creator of the token with id `tokenId`."
        }
      },
      "releaseERC20Funds(uint256,address,uint8)": {
        "params": {
          "coin": "The address of the ERC20 token whose funds are being released.",
          "releaseTo": "Specifies whether the minter or creator should be released to.",
          "tokenId": "The id of the token whose funds are being released."
        }
      },
      "releaseNativeFunds(uint256,uint8)": {
        "params": {
          "releaseTo": "Specifies whether the minter or creator should be released to.",
          "tokenId": "The id of the token whose funds are being released."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "salePrice": "The sale price of the token.",
          "tokenId": "The id of the token whose royalty info is being queried."
        },
        "returns": {
          "_0": "The royalty fee and recipient for a given token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setAutomaticApprovalOfTransfersFromValidator(bool)": {
        "details": "Throws when the caller is not the contract owner. ",
        "params": {
          "autoApprove": "If true, the collection's transfer validator will be automatically approved to                    transfer holder's tokens."
        }
      },
      "setTransferValidator(address)": {
        "details": "Throws when provided validator contract is not the zero address and does not have code.Throws when the caller is not the contract owner.<h4>Postconditions:</h4>         1. The transferValidator address is updated.         2. The `TransferValidatorUpdated` event is emitted.",
        "params": {
          "transferValidator_": "The address of the transfer validator contract."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTransferValidationFunction()": {
        "notice": "Returns the function selector for the transfer validator's validation function to be called for transaction simulation. "
      },
      "getTransferValidator()": {
        "notice": "Returns the transfer validator contract address for this token contract."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Overrides behavior of isApprovedFor all such that if an operator is not explicitly approved         for all, the contract owner can optionally auto-approve the 721-C transfer validator for transfers."
      },
      "minterOf(uint256)": {
        "notice": "Returns the minter of the token with id `tokenId`."
      },
      "paymentSplitterOf(uint256)": {
        "notice": "Returns the payment splitter of the token with id `tokenId`."
      },
      "paymentSplittersOfMinter(address)": {
        "notice": "Returns the payment splitters of the minter `minter`."
      },
      "releasableERC20Funds(uint256,address,uint8)": {
        "notice": "Returns the amount of ERC20 funds that can be released to the minter or creator of the token with id `tokenId`."
      },
      "releasableNativeFunds(uint256,uint8)": {
        "notice": "Returns the amount of native funds that can be released to the minter or creator of the token with id `tokenId`."
      },
      "releaseERC20Funds(uint256,address,uint8)": {
        "notice": "Releases all available ERC20 funds to the minter or creator of the token with id `tokenId`."
      },
      "releaseNativeFunds(uint256,uint8)": {
        "notice": "Releases all available native funds to the minter or creator of the token with id `tokenId`."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "Returns the royalty fee and recipient for a given token."
      },
      "setAutomaticApprovalOfTransfersFromValidator(bool)": {
        "notice": "Sets if the transfer validator is automatically approved as an operator for all token owners. "
      },
      "setTransferValidator(address)": {
        "notice": "Sets the transfer validator for the token contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2828,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2830,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2834,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2838,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2842,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2848,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1512,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_contractName",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 1514,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_contractSymbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2520,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1667,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "isValidatorInitialized",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 1670,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "transferValidator",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1620,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "autoApproveTransfersFromValidator",
        "offset": 20,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 600,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_royaltyFeeNumerator",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 602,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_minterShares",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 604,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_creatorShares",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 606,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_creator",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 608,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_paymentSplitterReference",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 612,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_minters",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 616,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_paymentSplitters",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 621,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "_minterPaymentSplitters",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5555,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5559,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "mintedTokens",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5569,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "tokenColors",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(Colors)5564_storage)"
      },
      {
        "astId": 5573,
        "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
        "label": "colorCombinations",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Colors)5564_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EthereumNorthStar.Colors)",
        "numberOfBytes": "32",
        "value": "t_struct(Colors)5564_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Colors)5564_storage": {
        "encoding": "inplace",
        "label": "struct EthereumNorthStar.Colors",
        "members": [
          {
            "astId": 5561,
            "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
            "label": "leftHalf",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5563,
            "contract": "contracts/EthereumNorthStar.sol:EthereumNorthStar",
            "label": "rightHalf",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}